<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Forge.Base</name>
    </assembly>
    <members>
        <member name="T:Forge.Consts">
            <summary>Constants</summary>
        </member>
        <member name="F:Forge.Consts.WINDOWS_FORMS_CONTROL">
            <summary>The windows form control</summary>
        </member>
        <member name="F:Forge.Consts.WINDOWS_DEPENDENCY_OBJECT">
            <summary>The windows dependency object</summary>
        </member>
        <member name="T:Forge.IO.PathHelper">
            <summary>
            Helper method(s)
            </summary>
        </member>
        <member name="M:Forge.IO.PathHelper.PerformFolderSecurityTest(System.String)">
            <summary>
            Performs the folder security test.
            </summary>
            <param name="path">The path.</param>
            <returns>True, if the security test passed, otherwise False.</returns>
            <example>
            <code>
            if (!PathHelper.PerformFolderSecurityTest(value))
            {
                throw new SecurityException(string.Format("Provided folder must have read, write and delete rights. Folder: {0}", value));
            }
            </code>
            </example>
        </member>
        <member name="M:Forge.IO.PathHelper.IsAbsolutePath(System.String)">
            <summary>
            Determines whether the path is an absolute path.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the path is absolute path, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.IO.PathHelper.CutoffBackslashFromPathEnd(System.String)">
            <summary>
            Cutoffs the backslash from path end.
            </summary>
            <param name="path">The path.</param>
            <returns>
            Path with backslash at the end
            </returns>
            <example>
              <code>
            string systemFolder = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            string systemFolderWithBackslash = string.Format("{0}\\", Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));
            Assert.IsTrue(systemFolder.Equals(PathHelper.CutoffBackslashFromPathEnd(systemFolder)));
            Assert.IsTrue(systemFolder.Equals(PathHelper.CutoffBackslashFromPathEnd(systemFolderWithBackslash)));
              </code>
              </example>
        </member>
        <member name="M:Forge.IO.PathHelper.CutoffLastEntryFromPath(System.String)">
            <summary>Cutoffs the last entry from path.</summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Forge.IO.PathHelper.ResolveEnvironmentSpecialFolder(System.String)">
             <summary>
             Resolves the environment special folder.
             </summary>
             <param name="path">The path.</param>
             <returns>The resolved path</returns>
             <example>
             <code>
             string systemFolder = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
             string path = string.Format("${0}\\test.docx", Environment.SpecialFolder.MyDocuments.ToString());
            
             string expectedResult = string.Format("{0}\\test.docx", systemFolder);
             Assert.IsTrue(expectedResult.Equals(PathHelper.ResolveEnvironmentSpecialFolder(path)));
             </code>
             </example>
        </member>
        <member name="T:Forge.Logging.ILog">
            <summary>The ILog interface is use by application to log messages into the underlying logger framework.</summary>
        </member>
        <member name="T:Forge.Logging.ILoggerWrapper">
            <summary>Wrapper interface for logger implementation</summary>
        </member>
        <member name="T:Forge.Logging.LogManager">
            <summary>This class is used by client applications to request logger instances.</summary>
        </member>
        <member name="M:Forge.Logging.LogManager.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Forge.Logging.LogManager"/> class.</summary>
        </member>
        <member name="P:Forge.Logging.LogManager.LOGGER">
            <summary>Gets or sets the logger wrapper.</summary>
            <value>The logger wrapper.</value>
        </member>
        <member name="T:Forge.Logging.LogUtils">
            <summary>
            Utilities for logging
            </summary>
        </member>
        <member name="P:Forge.Logging.LogUtils.IsSubscribedForAssemblyLoad">
            <summary>
            Gets a value indicating whether [is subscribed for assembly load].
            </summary>
            <value>
            <c>true</c> if [is subscribed for assembly load]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Logging.LogUtils.IsSubscribedForAppDomainUnhandledException">
            <summary>
            Gets or sets a value indicating whether [is subscribed for application domain unhandled exception].
            </summary>
            <value>
            <c>true</c> if [is subscribed for application domain unhandled exception]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Forge.Logging.LogUtils.TraceAssemblyLoads(System.Boolean)">
            <summary>
            Traces the assembly loads.
            </summary>
            <param name="state">if set to <c>true</c> [state].</param>
        </member>
        <member name="M:Forge.Logging.LogUtils.LogProcessInfo">
            <summary>
            Logs the current process information.
            </summary>
        </member>
        <member name="M:Forge.Logging.LogUtils.LogDomainInfo">
            <summary>
            Logs the loaded assemblies.
            </summary>
        </member>
        <member name="M:Forge.Logging.LogUtils.LogLoadedAssemblies">
            <summary>
            Logs the loaded assemblies.
            </summary>
        </member>
        <member name="M:Forge.Logging.LogUtils.LogAll">
            <summary>
            Logs all.
            </summary>
        </member>
        <member name="T:Forge.Logging.NullLog">
            <summary>Empty log. Default implementation, do nothing.</summary>
            <seealso cref="T:Forge.Logging.ILog" />
        </member>
        <member name="T:Forge.Logging.NullLogger">
            <summary>Empty logger. Default implementation, do nothing.</summary>
            <seealso cref="T:Forge.Logging.ILoggerWrapper" />
        </member>
        <member name="P:Forge.Logging.NullLogger.Instance">
            <summary>Gets the singleton instance.</summary>
            <value>The instance.</value>
        </member>
        <member name="T:Forge.Management.IManager">
            <summary>
            Represents a manager services
            </summary>
        </member>
        <member name="E:Forge.Management.IManager.EventStart">
            <summary>
            Occurs when [event start].
            </summary>
        </member>
        <member name="E:Forge.Management.IManager.EventStop">
            <summary>
            Occurs when [event stop].
            </summary>
        </member>
        <member name="P:Forge.Management.IManager.ManagerState">
            <summary>
            Gets the state of the manager.
            </summary>
            <value>
            The state of the manager.
            </value>
        </member>
        <member name="P:Forge.Management.IManager.EventSyncInvocation">
            <summary>
            Gets or sets a value indicating whether [event sync invocation].
            </summary>
            <value>
              <c>true</c> if [event sync invocation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Management.IManager.EventUIInvocation">
            <summary>
            Gets or sets a value indicating whether [event UI invocation].
            </summary>
            <value>
              <c>true</c> if [event UI invocation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Management.IManager.EventParallelInvocation">
            <summary>
            Gets or sets a value indicating whether [event parallel invocation].
            </summary>
            <value>
            <c>true</c> if [event parallel invocation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Forge.Management.IManager.BeginStart(System.AsyncCallback,System.Object)">
            <summary>
            Starts the manager asyncronously.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>Async property</returns>
        </member>
        <member name="M:Forge.Management.IManager.Start">
            <summary>
            Starts this manager instance.
            </summary>
            <returns>Manager State</returns>
        </member>
        <member name="M:Forge.Management.IManager.EndStart(System.IAsyncResult)">
            <summary>
            Ends the asynchronous start process.
            </summary>
            <param name="asyncResult">The async result.</param>
            <returns>Manager State</returns>
        </member>
        <member name="M:Forge.Management.IManager.BeginStop(System.AsyncCallback,System.Object)">
            <summary>
            Stops the manager asyncronously.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>Async property</returns>
        </member>
        <member name="M:Forge.Management.IManager.Stop">
            <summary>
            Stops this manager instance.
            </summary>
            <returns>Manager State</returns>
        </member>
        <member name="M:Forge.Management.IManager.EndStop(System.IAsyncResult)">
            <summary>
            Ends the asynchronous stop process.
            </summary>
            <param name="asyncResult">The async result.</param>
            <returns>Manager State</returns>
        </member>
        <member name="T:Forge.Management.ManagerBase">
            <summary>
            Represents the base methods and properties of a manager service
            </summary>
        </member>
        <member name="E:Forge.Management.ManagerBase.EventStart">
            <summary>
            Occurs when [event start].
            </summary>
        </member>
        <member name="E:Forge.Management.ManagerBase.EventStop">
            <summary>
            Occurs when [event stop].
            </summary>
        </member>
        <member name="M:Forge.Management.ManagerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Management.ManagerBase" /> class.
            </summary>
        </member>
        <member name="P:Forge.Management.ManagerBase.ManagerState">
            <summary>
            Gets or sets the state of the manager.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:Forge.Management.ManagerBase.EventSyncInvocation">
            <summary>
            Gets or sets a value indicating whether [event sync invocation].
            </summary>
            <value>
              <c>true</c> if [event sync invocation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Management.ManagerBase.EventUIInvocation">
            <summary>
            Gets or sets a value indicating whether [event UI invocation].
            </summary>
            <value>
              <c>true</c> if [event UI invocation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Management.ManagerBase.EventParallelInvocation">
            <summary>
            Gets or sets a value indicating whether [event parallel invocation].
            </summary>
            <value>
            	<c>true</c> if [event parallel invocation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Forge.Management.ManagerBase.BeginStart(System.AsyncCallback,System.Object)">
            <summary>
            Starts the manager asyncronously.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>
            Async property
            </returns>
        </member>
        <member name="M:Forge.Management.ManagerBase.Start">
            <summary>
            Starts this manager instance.
            </summary>
            <returns>
            Manager State
            </returns>
        </member>
        <member name="M:Forge.Management.ManagerBase.EndStart(System.IAsyncResult)">
            <summary>
            Ends the asynchronous start process.
            </summary>
            <param name="asyncResult">The async result.</param>
            <returns>
            Manager State
            </returns>
        </member>
        <member name="M:Forge.Management.ManagerBase.BeginStop(System.AsyncCallback,System.Object)">
            <summary>
            Stops the manager asyncronously.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>
            Async property
            </returns>
        </member>
        <member name="M:Forge.Management.ManagerBase.Stop">
            <summary>
            Stops this manager instance.
            </summary>
            <returns>
            Manager State
            </returns>
        </member>
        <member name="M:Forge.Management.ManagerBase.EndStop(System.IAsyncResult)">
            <summary>
            Ends the asynchronous stop process.
            </summary>
            <param name="asyncResult">The async result.</param>
            <returns>
            Manager State
            </returns>
        </member>
        <member name="M:Forge.Management.ManagerBase.RaiseEvent(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Raises the event.
            </summary>
            <param name="del">The delegae (event).</param>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Forge.Management.ManagerBase.OnStart(Forge.Management.ManagerEventStateEnum)">
            <summary>
            Called when [start].
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Forge.Management.ManagerBase.OnStartWithCustomEventArgs(Forge.Management.ManagerEventStateEventArgs)">
            <summary>
            Raises the <see cref="E:StartWithCustomEventArgs" /> event.
            </summary>
            <param name="e">The <see cref="T:Forge.Management.ManagerEventStateEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Forge.Management.ManagerBase.OnStop(Forge.Management.ManagerEventStateEnum)">
            <summary>
            Called when [stop].
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Forge.Management.ManagerBase.OnStopWithCustomEventArgs(Forge.Management.ManagerEventStateEventArgs)">
            <summary>
            Raises the <see cref="E:StopWithCustomEventArgs" /> event.
            </summary>
            <param name="e">The <see cref="T:Forge.Management.ManagerEventStateEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Forge.Management.ManagerEventStateEnum">
            <summary>
            Represents an event state
            </summary>
        </member>
        <member name="F:Forge.Management.ManagerEventStateEnum.Before">
            <summary>
            Before the event
            </summary>
        </member>
        <member name="F:Forge.Management.ManagerEventStateEnum.After">
            <summary>
            After the event
            </summary>
        </member>
        <member name="T:Forge.Management.ManagerEventStateEventArgs">
            <summary>
            Represents the state of an event
            </summary>
        </member>
        <member name="M:Forge.Management.ManagerEventStateEventArgs.#ctor(Forge.Management.ManagerEventStateEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Management.ManagerEventStateEventArgs" /> class.
            </summary>
            <param name="eventState">State of the event.</param>
        </member>
        <member name="P:Forge.Management.ManagerEventStateEventArgs.EventState">
            <summary>
            Gets the state of the event.
            </summary>
            <value>
            The state of the event.
            </value>
        </member>
        <member name="T:Forge.Management.ManagerSingletonBase`1">
            <summary>
            Represents the base methods and properties of a singleton manager service
            </summary>
            <typeparam name="TManager">The type of the manager.</typeparam>
        </member>
        <member name="F:Forge.Management.ManagerSingletonBase`1.mSingletonInstance">
            <summary>
            The singleton instance
            </summary>
        </member>
        <member name="M:Forge.Management.ManagerSingletonBase`1.#cctor">
            <summary>
            Initializes the <see cref="T:Forge.Management.ManagerSingletonBase`1" /> class.
            </summary>
        </member>
        <member name="M:Forge.Management.ManagerSingletonBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Management.ManagerSingletonBase`1" /> class.
            </summary>
        </member>
        <member name="P:Forge.Management.ManagerSingletonBase`1.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The singleton instance.
            </value>
        </member>
        <member name="T:Forge.Management.ManagerStateEnum">
            <summary>
            Represents the state of a manager
            </summary>
        </member>
        <member name="F:Forge.Management.ManagerStateEnum.Uninitialized">
            <summary>
            The manager is uninitialized
            </summary>
        </member>
        <member name="F:Forge.Management.ManagerStateEnum.Started">
            <summary>
            The manager is started
            </summary>
        </member>
        <member name="F:Forge.Management.ManagerStateEnum.Stopped">
            <summary>
            The manager is stopped
            </summary>
        </member>
        <member name="F:Forge.Management.ManagerStateEnum.Fault">
            <summary>
            The manager is in fault state
            </summary>
        </member>
        <member name="T:Forge.MBRBase">
            <summary>
            Base class for MarshalByRefObject classes
            </summary>
        </member>
        <member name="M:Forge.MBRBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.MBRBase"/> class.
            </summary>
        </member>
        <member name="M:Forge.MBRBase.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> property.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure" />
              </PermissionSet>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="T:Forge.ApplicationHelper">
            <summary>
            Represents an application with custom extensions
            </summary>
        </member>
        <member name="F:Forge.ApplicationHelper.MachineName">
            <summary>
            Represents the constant of the machine name
            </summary>
        </member>
        <member name="F:Forge.ApplicationHelper.UserDomainName">
            <summary>
            Represents the constant of the user domain name
            </summary>
        </member>
        <member name="F:Forge.ApplicationHelper.UserName">
            <summary>
            Represents the constant of the user name
            </summary>
        </member>
        <member name="P:Forge.ApplicationHelper.ApplicationId">
            <summary>
            Gets or sets the application id.
            </summary>
            <value>
            The application id.
            </value>
        </member>
        <member name="M:Forge.ApplicationHelper.IsUIThread">
            <summary>
            Gets a value indicating whether the thread is the UI thread.
            </summary>
            <value>
            <c>true</c> if [is unique identifier thread]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Forge.Arrays">
            <summary>
            Array operation(s)
            </summary>
        </member>
        <member name="M:Forge.Arrays.DeepEquals(System.Array,System.Array)">
            <summary>
            Compare the two arrays
            </summary>
            <param name="a">Array A</param>
            <param name="b">Array B</param>
            <returns>True if the two array are equals, otherwise False.</returns>
            <example>
            <code>
              int[] a = new int[] { 1, 2, 3, 4 };
              int[] b = new int[] { 1, 2, 3, 4 };
              Assert.IsTrue(Arrays.DeepEquals(a, b));
            </code>
            </example>
        </member>
        <member name="T:Forge.ClientUtils">
            <summary>
            Common client helper methods
            </summary>
        </member>
        <member name="M:Forge.ClientUtils.GetBitCount(System.UInt32)">
            <summary>
            Gets the bit count.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Forge.ClientUtils.IsCriticalException(System.Exception)">
            <summary>
            Determines whether [is critical exception] [the specified ex].
            </summary>
            <param name="ex">The ex.</param>
            <returns>
              <c>true</c> if [is critical exception] [the specified ex]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.ClientUtils.IsEnumValid(System.Enum,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether [is enum valid] [the specified enum value].
            </summary>
            <param name="enumValue">The enum value.</param>
            <param name="value">The value.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <returns>
              <c>true</c> if [is enum valid] [the specified enum value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.ClientUtils.IsEnumValid(System.Enum,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether [is enum valid] [the specified enum value].
            </summary>
            <param name="enumValue">The enum value.</param>
            <param name="value">The value.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <param name="maxNumberOfBitsOn">The max number of bits on.</param>
            <returns>
              <c>true</c> if [is enum valid] [the specified enum value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.ClientUtils.IsEnumValid_Masked(System.Enum,System.Int32,System.UInt32)">
            <summary>
            Determines whether [is enum valid_ masked] [the specified enum value].
            </summary>
            <param name="enumValue">The enum value.</param>
            <param name="value">The value.</param>
            <param name="mask">The mask.</param>
            <returns>
              <c>true</c> if [is enum valid_ masked] [the specified enum value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.ClientUtils.IsEnumValid_NotSequential(System.Enum,System.Int32,System.Int32[])">
            <summary>
            Determines whether [is enum valid_ not sequential] [the specified enum value].
            </summary>
            <param name="enumValue">The enum value.</param>
            <param name="value">The value.</param>
            <param name="enumValues">The enum values.</param>
            <returns>
              <c>true</c> if [is enum valid_ not sequential] [the specified enum value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.ClientUtils.IsSecurityOrCriticalException(System.Exception)">
            <summary>
            Determines whether [is security or critical exception] [the specified ex].
            </summary>
            <param name="ex">The ex.</param>
            <returns>
              <c>true</c> if [is security or critical exception] [the specified ex]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Forge.Collections.AbstractList`1">
            <summary>
            Abstract base list extension
            </summary>
            <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="M:Forge.Collections.AbstractList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Collections.AbstractList`1"/> class.
            </summary>
        </member>
        <member name="M:Forge.Collections.AbstractList`1.Forge#Collections#IEnumerableSpecialized{T}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>Enumerator of generic items</returns>
        </member>
        <member name="M:Forge.Collections.AbstractList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>Enumerator of generic items</returns>
        </member>
        <member name="T:Forge.Collections.AbstractSubList`1">
            <summary>
            Abstract base class for sub list
            </summary>
            <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="F:Forge.Collections.AbstractSubList`1.mVersion">
            <summary>
            Represents the version of the collection
            </summary>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Collections.AbstractSubList`1"/> class.
            </summary>
        </member>
        <member name="P:Forge.Collections.AbstractSubList`1.Version">
            <summary>
            Gets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:Forge.Collections.AbstractSubList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Collections.AbstractSubList`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
            </summary>
            <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Forge.Collections.AbstractSubList`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
        </member>
        <member name="P:Forge.Collections.AbstractSubList`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
            <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.SubList(System.Int32,System.Int32)">
            <summary>
            Subs the list.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <returns>Sub list of generic items</returns>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.Add(System.Object)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The position of the new item</returns>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.IndexOf(System.Object)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns>The index of the item. -1 if not found.</returns>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.IndexOf(`0)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns>The index of the item. -1 if not found.</returns>
        </member>
        <member name="P:Forge.Collections.AbstractSubList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:System.Object" />.
            </value>
            <param name="index">The index.</param>
            <returns>The object</returns>
        </member>
        <member name="P:Forge.Collections.AbstractSubList`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <value>
            The value
            </value>
            <param name="index">The index.</param>
            <returns>The item</returns>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.Contains(System.Object)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>True, if the collection changed, otherwise False.</returns>
        </member>
        <member name="P:Forge.Collections.AbstractSubList`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>Enumerator of generic items</returns>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>Enumerator of generic items</returns>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.Forge#Collections#ISubList{T}#SubList(System.Int32,System.Int32)">
            <summary>
            Subs the list.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <returns>Sub list of generic items</returns>
        </member>
        <member name="M:Forge.Collections.AbstractSubList`1.ToArray">
            <summary>
            To the array.
            </summary>
            <returns>Array of generic items</returns>
        </member>
        <member name="T:Forge.Collections.DictionaryHelper">
            <summary>
            Contains the helper methods for a dictionary
            </summary>
        </member>
        <member name="M:Forge.Collections.DictionaryHelper.GetDictionaryValue``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Gets the dictionary value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Forge.Collections.DictionaryHelper.GetDictionaryValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Boolean)">
            <summary>
            Gets the dictionary value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="throwOnMissingKey">if set to <c>true</c> [throw on missing key].</param>
            <returns>
            The value
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Occurs, if the throwOnMissingKey is true and the key no found.</exception>
        </member>
        <member name="T:Forge.Collections.Enumerator`1">
            <summary>
            Mutable enumerator implementation
            </summary>
            <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="M:Forge.Collections.Enumerator`1.#ctor(Forge.Collections.ISubList{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Enumerator struct.
            </summary>
            <param name="list">The list.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="M:Forge.Collections.Enumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Forge.Collections.Enumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Forge.Collections.Enumerator`1.Current">
            <summary>
            Gets the current.
            </summary>
            <value>
            The current.
            </value>
            <exception cref="T:System.InvalidOperationException">>Occurs when no element selected</exception>
        </member>
        <member name="P:Forge.Collections.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="M:Forge.Collections.Enumerator`1.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Forge.Collections.Enumerator`1.Remove">
            <summary>
            Removes the current element.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when no element selected</exception>
        </member>
        <member name="M:Forge.Collections.Enumerator`1.HasNext">
            <summary>
            Determines whether this instance has next.
            </summary>
            <returns>
              <c>true</c> if this instance has next; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Forge.Collections.IEnumerableSpecialized`1">
            <summary>
            IEnumerable specialized (mutable enumerable) interface
            </summary>
            <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="M:Forge.Collections.IEnumerableSpecialized`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            Enumerator of generic items
            </returns>
        </member>
        <member name="T:Forge.Collections.IEnumeratorSpecialized`1">
            <summary>
            IEnumerator specialized (mutable enumerator) interface
            </summary>
            <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="M:Forge.Collections.IEnumeratorSpecialized`1.Remove">
            <summary>
            Removes from the underlying collection the last element returned by the
            iterator (optional operation).  This method can be called only once per
            call to <tt>next</tt>.  The behavior of an iterator is unspecified if
            the underlying collection is modified while the iteration is in
            progress in any way other than by calling this method.
            </summary>
        </member>
        <member name="M:Forge.Collections.IEnumeratorSpecialized`1.HasNext">
            <summary>
            Determines whether has a next item in the enumerator.
            </summary>
            <returns>
              <c>true</c> if this instance has next; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Forge.Collections.IListSpecialized`1">
             <summary>
             Mutable list extension interface
             <example>
             <code>
             Criteria arithmeticCriteria = new ArithmeticCriteria("value", 3L, ArithmeticOperandEnum.Greater);
            
             IListSpecialized&lt;EnumeratorItem&gt; resultList = uow.Query&lt;EnumeratorItem&gt;(arithmeticCriteria);
             foreach (EnumeratorItem e in resultList)
             {
                 Assert.IsTrue(arithmeticCriteria.ResultForEntity(e));
                 Assert.AreEqual(resultList.Count, 1);
                 Assert.AreEqual(e.Value, 4L);
             }
             </code>
             </example>
             </summary>
             <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="T:Forge.Collections.ISubList`1">
            <summary>
            Mutable sub list interface
            This class represents a view of a parent list
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Forge.Collections.ISubList`1.SubList(System.Int32,System.Int32)">
            <summary>
            Subs the list.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <returns>Sub list with generic items</returns>
        </member>
        <member name="M:Forge.Collections.ISubList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="P:Forge.Collections.ISubList`1.Version">
            <summary>
            Gets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="T:Forge.Collections.ListSpecialized`1">
             <summary>
             Mutable list implementation for .NET
             <example>
             <code>
             IList queryResult = (System.Collections.IList)mGenericQueryMethod.MakeGenericMethod(queryData.EntityType).Invoke(null, new object[] { session, queryData, logQuery });
            
             IListSpecialized&lt;EntityBase&gt; result = new ListSpecialized&lt;EntityBase&gt;();
             foreach (object b in queryResult)
             {
                 result.Add((EntityBase)b);
             }
            
             return result;
             </code>
             </example>
             </summary>
             <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="F:Forge.Collections.ListSpecialized`1.mList">
            <summary>
            The inner list
            </summary>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Collections.ListSpecialized`1"/> class.
            </summary>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Collections.ListSpecialized`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Collections.ListSpecialized`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Collections.ListSpecialized`1"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.AsReadOnly">
            <summary>
            Ases the read only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element
            using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The zero-based index of item in the sorted List,
            if item is found; otherwise, a negative number that is the bitwise complement
            of the index of the next element that is larger than item or, if there is
            no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element
            using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The item.</param>
            <param name="comparer">The comparer.</param>
            <returns>
            The zero-based index of item in the sorted List,
            if item is found; otherwise, a negative number that is the bitwise complement
            of the index of the next element that is larger than item or, if there is
            no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element
            using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="item">The item.</param>
            <param name="comparer">The comparer.</param>
            <returns>
            The zero-based index of item in the sorted List,
            if item is found; otherwise, a negative number that is the bitwise complement
            of the index of the next element that is larger than item or, if there is
            no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current List to
            another type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="converter">The converter.</param>
            <returns>
            A List of the target type containing the converted
            elements from the current List.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.CopyTo(`0[])">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="index">The index.</param>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Exists(System.Predicate{`0})">
            <summary>
            Existses the specified match.
            </summary>
            <param name="match">The match.</param>
            <returns>True, if the predicate matches, otherwise False.</returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Find(System.Predicate{`0})">
            <summary>
            Finds the specified match.
            </summary>
            <param name="match">The match.</param>
            <returns>Item</returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.FindAll(System.Predicate{`0})">
            <summary>
            Finds all.
            </summary>
            <param name="match">The match.</param>
            <returns>List of items</returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.FindIndex(System.Predicate{`0})">
            <summary>
            Finds the index.
            </summary>
            <param name="match">The match.</param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the
            conditions defined by match, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="match">The match.</param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the
            conditions defined by match, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <param name="match">The match.</param>
            <returns>
            The zero-based index of the first occurrence of an element that matches the
            conditions defined by match, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.FindLast(System.Predicate{`0})">
            <summary>
            Finds the last.
            </summary>
            <param name="match">The match.</param>
            <returns>
            The last element that matches the conditions defined by the specified predicate,
            if found; otherwise, the default value for type T.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Finds the last index.
            </summary>
            <param name="match">The match.</param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the
            conditions defined by match, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the last index.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="match">The match.</param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the
            conditions defined by match, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the last index.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <param name="match">The match.</param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the
            conditions defined by match, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.ForEach(System.Action{`0})">
            <summary>
            Fors the each.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets the range.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns>A shallow copy of a range of elements in the source ListSpecialized&lt;T&gt;.</returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.IndexOf(`0)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The zero-based index of the first occurrence of item within the entire ListSpecialized&lt;T&gt;
            if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.IndexOf(`0,System.Int32)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <returns>
            The zero-based index of the first occurrence of item within the entire ListSpecialized&lt;T&gt;
            if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns>
            The zero-based index of the first occurrence of item within the entire ListSpecialized&lt;T&gt;
            if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the range.
            </summary>
            <param name="index">The index.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.LastIndexOf(`0)">
            <summary>
            Lasts the index of.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The zero-based index of the last occurrence of item within the entire the
            ListSpecialized&lt;T&gt;, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Lasts the index of.
            </summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <returns>
            The zero-based index of the last occurrence of item within the entire the
            ListSpecialized&lt;T&gt;, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Lasts the index of.
            </summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns>
            The zero-based index of the last occurrence of item within the entire the
            ListSpecialized&lt;T&gt;, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>True, if the collection changed, otherwise False.</returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all.
            </summary>
            <param name="match">The match.</param>
            <returns>The number of removed items</returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the range.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Reverse">
            <summary>
            Reverses this instance.
            </summary>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Sort">
            <summary>
            Sorts this instance.
            </summary>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the specified comparer.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the specified comparison.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.ToArray">
            <summary>
            Toes the array.
            </summary>
            <returns>Array of items</returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.TrimExcess">
            <summary>
            Trims the excess.
            </summary>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Trues for all.
            </summary>
            <param name="match">The match.</param>
            <returns>True, if the predicate mataches on all elements</returns>
        </member>
        <member name="P:Forge.Collections.ListSpecialized`1.Capacity">
            <summary>
            Gets or sets the capacity.
            </summary>
            <value>
            The capacity.
            </value>
        </member>
        <member name="P:Forge.Collections.ListSpecialized`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Forge.Collections.ListSpecialized`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <value>
            The value
            </value>
            <param name="index">The index.</param>
            <returns>Item</returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>Enumerator of generic items</returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Add(System.Object)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Contains(System.Object)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if [contains] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.IndexOf(System.Object)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The index of <paramref name="value" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.Remove(System.Object)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Forge.Collections.ListSpecialized`1.SubList(System.Int32,System.Int32)">
            <summary>
            Subs the list.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <returns>Sub list of the items</returns>
        </member>
        <member name="T:Forge.Collections.SubListImpl`1">
            <summary>
            Sub list (view) implementation for a mutable collection
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.#ctor(Forge.Collections.ISubList{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Collections.SubListImpl`1"/> class.
            </summary>
            <param name="list">The list.</param>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.SubList(System.Int32,System.Int32)">
            <summary>
            Subs the list.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <returns>Sub list of the items</returns>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>True, if the collection changed, otherwise False.</returns>
        </member>
        <member name="P:Forge.Collections.SubListImpl`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <value>
            The value
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Forge.Collections.SubListImpl`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>Enumerator of generic items</returns>
        </member>
        <member name="M:Forge.Collections.SubListImpl`1.IndexOf(`0)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns>Index of the element, if found in the collection, -1 if not found.</returns>
        </member>
        <member name="T:Forge.Configuration.Check.ConfigurationValidator">
            <summary>
            Configuration validator which validates the application xml configuration.
            </summary>
        </member>
        <member name="P:Forge.Configuration.Check.ConfigurationValidator.Log">
            <summary>
            Get or set the Log where the EventLogEntry will be written
            Default is the "Application"
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="P:Forge.Configuration.Check.ConfigurationValidator.EventLogSource">
            <summary>
            Get or set the EventLog Source name in the Application
            Do not specify existing Source name
            </summary>
            <value>
            The event log source.
            </value>
        </member>
        <member name="M:Forge.Configuration.Check.ConfigurationValidator.CreateEventLog">
            <summary>
            Create the EventLog log if it does not exist
            </summary>
        </member>
        <member name="M:Forge.Configuration.Check.ConfigurationValidator.ValidateConfiguration(System.String)">
            <summary>
            Validates the configuration.
            </summary>
            <param name="configFile">The configuration file.</param>
            <returns>True, if the configuration file content is valid, otherwise False.</returns>
        </member>
        <member name="M:Forge.Configuration.Check.ConfigurationValidator.ValidateConfiguration(System.String,System.Configuration.ConfigurationUserLevel)">
            <summary>
            Validates the configuration
            </summary>
            <param name="configFile">The config file.</param>
            <param name="userLevel">The user level.</param>
            <returns>
            True, if the configuration file content is valid, otherwise False.
            </returns>
        </member>
        <member name="M:Forge.Configuration.Check.ConfigurationValidator.WriteEventLog(System.String)">
            <summary>
            Write an eventlog entry to the specified Log
            </summary>
            <param name="message">Message to write</param>
        </member>
        <member name="T:Forge.Configuration.IInitializable">
            <summary>
            Represents an object which initializable from configuration
            </summary>
        </member>
        <member name="P:Forge.Configuration.IInitializable.IsInitialized">
            <summary>
            Gets a value indicating whether [is initialized].
            </summary>
            <value>
              <c>true</c> if [is initialized]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Forge.Configuration.IInitializable.Initialize(Forge.Configuration.Shared.CategoryPropertyItem)">
            <summary>
            Initializes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Forge.Configuration.IPropertyItem">
            <summary>
            Property data interface
            </summary>
        </member>
        <member name="P:Forge.Configuration.IPropertyItem.PropertyItems">
            <summary>
            Gets the property items.
            </summary>
            <value>
            The property items.
            </value>
        </member>
        <member name="T:Forge.Configuration.PropertyItem">
            <summary>
            Property data representation
            </summary>
        </member>
        <member name="M:Forge.Configuration.PropertyItem.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Forge.Configuration.PropertyItem"/> class from being created.
            </summary>
        </member>
        <member name="M:Forge.Configuration.PropertyItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.PropertyItem"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Forge.Configuration.PropertyItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.PropertyItem"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Forge.Configuration.PropertyItem.#ctor(System.String,System.Collections.Generic.IEnumerable{Forge.Configuration.PropertyItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.PropertyItem"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="propertyItems">The property items.</param>
        </member>
        <member name="M:Forge.Configuration.PropertyItem.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Forge.Configuration.PropertyItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.PropertyItem"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="value">The value.</param>
            <param name="propertyItems">The property items.</param>
        </member>
        <member name="P:Forge.Configuration.PropertyItem.Id">
            <summary>
            Gets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Forge.Configuration.PropertyItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Forge.Configuration.PropertyItem.PropertyItems">
            <summary>
            Gets the property items.
            </summary>
            <value>
            The property items.
            </value>
        </member>
        <member name="M:Forge.Configuration.PropertyItem.CreateCategoryPropertyItem">
            <summary>
            Creates the category property item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Forge.Configuration.PropertyItem.GetValueByPath(System.Collections.Generic.Dictionary{System.String,Forge.Configuration.PropertyItem},System.String)">
            <summary>
            Gets the value by path.
            </summary>
            <param name="propertyItems">The property items.</param>
            <param name="configPath">The config path.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            propertyItems
            or
            configPath
            </exception>
        </member>
        <member name="M:Forge.Configuration.PropertyItem.GetCategoryPropertyByPath(System.Collections.Generic.Dictionary{System.String,Forge.Configuration.PropertyItem},System.String)">
            <summary>
            Gets the category property by path.
            </summary>
            <param name="propertyItems">The property items.</param>
            <param name="configPath">The config path.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            propertyItems
            or
            configPath
            </exception>
        </member>
        <member name="M:Forge.Configuration.PropertyItem.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Forge.Configuration.PropertyItem.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Forge.Configuration.PropertyItem.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Forge.Configuration.Shared.CategoryPropertyItems">
            <summary>
            CategoryProperty classes for general configuration structure
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItems.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.CategoryPropertyItems"/> class.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItems.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItems.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItems.Add(Forge.Configuration.Shared.CategoryPropertyItem)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItems.Remove(Forge.Configuration.Shared.CategoryPropertyItem)">
            <summary>
            Removes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItems.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:Forge.Configuration.Shared.CategoryPropertyItems.Item(System.Int32)">
            <summary>
            Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The specified property, attribute, or child element
            </returns>
        </member>
        <member name="P:Forge.Configuration.Shared.CategoryPropertyItems.Item(System.String)">
            <summary>
            Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <param name="key">The key.</param>
            <returns>
            The specified property, attribute, or child element
            </returns>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItems.GetCategoryItems(System.String)">
            <summary>
            Gets the category items.
            </summary>
            <param name="categoryName">Name of the category.</param>
            <returns>Collection of CategoryPropertyItem</returns>
            <exception cref="T:System.ArgumentNullException">categoryName</exception>
        </member>
        <member name="P:Forge.Configuration.Shared.CategoryPropertyItems.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItems.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItems.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>Enumerator of CategoryPropertyItems</returns>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItems.System#Collections#Generic#IEnumerable{Forge#Configuration#Shared#CategoryPropertyItem}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            Enumerator of CategoryPropertyItems
            </returns>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItems.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator" /> which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />
            </returns>
        </member>
        <member name="T:Forge.Configuration.Shared.CategoryPropertyItem">
            <summary>
            CategoryProperty classes for general configuration structure
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.CategoryPropertyItem"/> class.
            </summary>
        </member>
        <member name="P:Forge.Configuration.Shared.CategoryPropertyItem.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.CategoryPropertyItem.EntryName">
            <summary>
            Gets or sets the name of the entry.
            </summary>
            <value>
            The name of the entry.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.CategoryPropertyItem.EntryValue">
            <summary>
            Gets or sets the entry value.
            </summary>
            <value>
            The entry value.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.CategoryPropertyItem.Encrypted">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Forge.Configuration.Shared.CategoryPropertyItem"/> is encrypted.
            </summary>
            <value>
              <c>true</c> if encrypted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.CategoryPropertyItem.PropertyItems">
            <summary>
            Gets or sets the property items.
            </summary>
            <value>
            The property items.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.CategoryPropertyItem.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItem.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItem.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItem.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Forge.Configuration.Shared.CategoryPropertyItem.CreatePropertyItem">
            <summary>
            Creates a property item.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Forge.Configuration.Shared.ConfigSettingsBase">
            <summary>
            Represents the base container of the configuration sections
            </summary>
        </member>
        <member name="F:Forge.Configuration.Shared.ConfigSettingsBase.mKnownConfigSettings">
            <summary>
            The known config sections
            </summary>
        </member>
        <member name="E:Forge.Configuration.Shared.ConfigSettingsBase.OnConfigurationChanged">
            <summary>
            Occurs when [on configuration changed].
            </summary>
        </member>
        <member name="P:Forge.Configuration.Shared.ConfigSettingsBase.DefaultConfigurationFile">
            <summary>
            Gets or sets the default configuration file.
            </summary>
            <value>
            The default configuration file.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.ConfigSettingsBase.RestartOnExternalChanges">
            <summary>
            Gets or sets a value indicating whether [restart configuration external changes].
            </summary>
            <value>
            <c>true</c> if [restart configuration external changes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.ConfigSettingsBase.UseLocalConfiguration">
            <summary>
            Gets or sets a value indicating whether [use local configuration].
            </summary>
            <value>
            <c>true</c> if [use local configuration]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigSettingsBase.RefreshInstance">
            <summary>
            Refreshes the instance.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigSettingsBase.SaveInstance(System.Configuration.ConfigurationSaveMode)">
            <summary>
            Saves the instance.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigSettingsBase.CreateSection">
            <summary>
            Creates the section.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigSettingsBase.Validate">
            <summary>
            Validates this instance values manually.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigSettingsBase.RaiseOnConfigurationChanged(System.EventArgs)">
            <summary>
            Raises the on configuration changed.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Forge.Configuration.Shared.ConfigurationAccessHelper">
            <summary>
            Configuration Access Helper
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationAccessHelper.GetValueByPath(Forge.Configuration.Shared.CategoryPropertyItems,System.String)">
            <summary>
            Get configuration value by path like X-Path.
            </summary>
            <param name="propertyItems">Root categoryproperty where the search begins</param>
            <param name="configPath">The expression, example: Animals\Dogs\Charles</param>
            <returns>
            The value or NULL if item does not exist
            </returns>
            <example>
              <code>
            string autoLoadValue = ConfigurationAccessHelper.GetValueByPath(RemotingConfiguration.Settings.CategoryPropertyItems, "Settings/AutomaticallyLoadChannels");
            if (string.IsNullOrEmpty(autoLoadValue))
            {
            ThrowHelper.ThrowArgumentNullException("autoLoadValue");
            }
              </code>
              </example>
            <exception cref="T:System.ArgumentNullException">
            propertyItems
            or
            configPath
            </exception>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationAccessHelper.GetCategoryPropertyByPath(Forge.Configuration.Shared.CategoryPropertyItems,System.String)">
            <summary>
            Get configuration categoryproperty item by path like X-Path.
            </summary>
            <param name="propertyItems">Root categoryproperty where the search begins</param>
            <param name="configPath">The expression, example: Animals\Dogs\Charles</param>
            <returns>
            The value or NULL if item does not exist
            </returns>
            <example>
              <code>
            CategoryPropertyItem configItem = ConfigurationAccessHelper.GetCategoryPropertyByPath(StorageConfiguration.Settings.CategoryPropertyItems, "NHibernateProvider/NHibernateStorages/Default");
            if (configItem != null)
            {
            DEFAULT_SESSION_FACTORY = CreateEntityManagerFactory(configItem);
            }
              </code>
              </example>
            <exception cref="T:System.ArgumentNullException">
            propertyItems
            or
            configPath
            </exception>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationAccessHelper.ParseShortValue(Forge.Configuration.Shared.CategoryPropertyItems,System.String,System.Int16,System.Int16,System.Int16@)">
            <summary>
            Parses the short value.
            </summary>
            <param name="root">The root.</param>
            <param name="entryId">The entry id.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <param name="value">The value.</param>
            <returns>
            True, if the parse was successful, otherwise False.
            </returns>
            <exception cref="T:Forge.Configuration.Shared.InvalidConfigurationValueException">
            </exception>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationAccessHelper.ParseIntValue(Forge.Configuration.Shared.CategoryPropertyItems,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Parses the int value.
            </summary>
            <param name="root">The root.</param>
            <param name="entryId">The entry id.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <param name="value">The value.</param>
            <returns>
            True, if the parse was successful, otherwise False.
            </returns>
            <example>
              <code>
            this.mMaxSendMessageSize = 32768;
            int value = 32768;
            if (ConfigurationAccessHelper.ParseIntValue(pi.PropertyItems, "MaxSendMessageSize", 1, Int32.MaxValue, ref value))
            {
            this.mMaxSendMessageSize = value;
            }
              </code>
              </example>
            <exception cref="T:Forge.Configuration.Shared.InvalidConfigurationValueException">
            </exception>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationAccessHelper.ParseLongValue(Forge.Configuration.Shared.CategoryPropertyItems,System.String,System.Int64,System.Int64,System.Int64@)">
            <summary>
            Parses the long value.
            </summary>
            <param name="root">The root.</param>
            <param name="entryId">The entry id.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <param name="value">The value.</param>
            <returns>
            True, if the parse was successful, otherwise False.
            </returns>
            <example>
              <code>
            ConfigurationAccessHelper.ParseLongValue(pi.PropertyItems, "DefaultErrorResponseTimeout", Timeout.Infinite, long.MaxValue, ref mDefaultErrorResponseTimeout);
              </code>
              </example>
            <exception cref="T:Forge.Configuration.Shared.InvalidConfigurationValueException">
            </exception>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationAccessHelper.ParseDoubleValue(Forge.Configuration.Shared.CategoryPropertyItems,System.String,System.Double,System.Double,System.Double@)">
            <summary>
            Parses the double value.
            </summary>
            <param name="root">The root.</param>
            <param name="entryId">The entry id.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <param name="value">The value.</param>
            <returns>
            True, if the parse was successful, otherwise False.
            </returns>
            <exception cref="T:Forge.Configuration.Shared.InvalidConfigurationValueException">
            </exception>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationAccessHelper.ParseDecimalValue(Forge.Configuration.Shared.CategoryPropertyItems,System.String,System.Decimal,System.Decimal,System.Decimal@)">
            <summary>
            Parses the decimal value.
            </summary>
            <param name="root">The root.</param>
            <param name="entryId">The entry id.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <param name="value">The value.</param>
            <returns>
            True, if the parse was successful, otherwise False.
            </returns>
            <exception cref="T:Forge.Configuration.Shared.InvalidConfigurationValueException">
            </exception>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationAccessHelper.ParseFloatValue(Forge.Configuration.Shared.CategoryPropertyItems,System.String,System.Single,System.Single,System.Single@)">
            <summary>
            Parses the float value.
            </summary>
            <param name="root">The root.</param>
            <param name="entryId">The entry id.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <param name="value">The value.</param>
            <returns>
            True, if the parse was successful, otherwise False.
            </returns>
            <exception cref="T:Forge.Configuration.Shared.InvalidConfigurationValueException">
            </exception>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationAccessHelper.ParseBooleanValue(Forge.Configuration.Shared.CategoryPropertyItems,System.String,System.Boolean@)">
            <summary>
            Parses the boolean value.
            </summary>
            <param name="root">The root.</param>
            <param name="entryId">The entry id.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>
            True, if the parse was successful, otherwise False.
            </returns>
            <example>
              <code>
            mSessionReusable = true;
            ConfigurationAccessHelper.ParseBooleanValue(pi.PropertyItems, "SessionReusable", ref mSessionReusable);
              </code>
              </example>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationAccessHelper.ParseStringValue(Forge.Configuration.Shared.CategoryPropertyItems,System.String,System.String@)">
            <summary>
            Parses the string value.
            </summary>
            <param name="root">The root.</param>
            <param name="entryId">The entry id.</param>
            <param name="value">The value.</param>
            <returns>
            True, if the parse was successful, otherwise False.
            </returns>
            <example>
              <code>
            ConfigurationAccessHelper.ParseStringValue(UpdateConfiguration.Settings.CategoryPropertyItems, DOWNLOAD_FOLDER, ref mDownloadFolder);
              </code>
              </example>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationAccessHelper.ParseEnumValue``1(Forge.Configuration.Shared.CategoryPropertyItems,System.String,``0@)">
            <summary>
            Parses the enum value.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="root">The root.</param>
            <param name="entryId">The entry id.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Forge.Configuration.Shared.ConfigurationCenter">
            <summary>
            Center properties of the configuration
            </summary>
        </member>
        <member name="P:Forge.Configuration.Shared.ConfigurationCenter.OverrideLocalSettings">
            <summary>
            Override local settings of configurations. Default is false.
            </summary>
            <value>
            <c>true</c> if [override local settings]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.ConfigurationCenter.ConfigurationFile">
            <summary>
            Specify global configuration file. Local configuration handler may override this file,
            so if you want to order them to use this file, you have to set true the value of property 'OverrideLocalSettings'
            </summary>
            <value>
            The configuration file.
            </value>
        </member>
        <member name="T:Forge.Configuration.Shared.ConfigurationSectionBase">
            <summary>
            Base configuration section for local configuration handler classes
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationSectionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.ConfigurationSectionBase"/> class.
            </summary>
        </member>
        <member name="P:Forge.Configuration.Shared.ConfigurationSectionBase.Properties">
            <summary>
            This is a key customization.
            It returns the initialized property bag.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> of properties for the element.
              </returns>
        </member>
        <member name="T:Forge.Configuration.Shared.ConfigurationSectionStandard">
            <summary>
            Configuration Section Standard
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationSectionStandard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.ConfigurationSectionStandard" /> class.
            </summary>
        </member>
        <member name="P:Forge.Configuration.Shared.ConfigurationSectionStandard.KnownSections">
            <summary>
            Gets the known sections.
            </summary>
            <value>
            The known sections.
            </value>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationSectionStandard.EncryptSection">
            <summary>
            Encrypts the section.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.ConfigurationSectionStandard.DecryptSection">
            <summary>
            Decrypts the section.
            </summary>
        </member>
        <member name="P:Forge.Configuration.Shared.ConfigurationSectionStandard.CategoryPropertyItems">
            <summary>
            Gets or sets the category property items.
            </summary>
            <value>
            The category property items.
            </value>
        </member>
        <member name="T:Forge.Configuration.Shared.Interfaces.IConfigurationCategoryContainer">
            <summary>
            Configuration Category Container interface
            </summary>
        </member>
        <member name="P:Forge.Configuration.Shared.Interfaces.IConfigurationCategoryContainer.CategoryPropertyItems">
            <summary>
            Gets or sets CategoryProperty Items collection
            </summary>
            <value>
            The category property items.
            </value>
        </member>
        <member name="T:Forge.Configuration.Shared.Interfaces.IConfigurationSectionHandler">
            <summary>
            Configuration section handler interface for local configuration handler classes
            </summary>
        </member>
        <member name="P:Forge.Configuration.Shared.Interfaces.IConfigurationSectionHandler.CategoryPropertyItems">
            <summary>
            Get category property items
            </summary>
            <value>
            The category property items.
            </value>
        </member>
        <member name="T:Forge.Configuration.Shared.Interfaces.IConfigurationSettingsBase">
            <summary>
            Interface for configuration settings handler event interface for local configuration handler classes
            </summary>
        </member>
        <member name="E:Forge.Configuration.Shared.Interfaces.IConfigurationSettingsBase.OnConfigurationChanged">
            <summary>
            Occurs when [on configuration changed].
            </summary>
        </member>
        <member name="T:Forge.Configuration.Shared.Interfaces.IConfigurationSettingsHandler`1">
            <summary>
            Configuration settings handler interface for local configuration handler classes
            </summary>
            <typeparam name="SectionType">The type of the ection type.</typeparam>
        </member>
        <member name="P:Forge.Configuration.Shared.Interfaces.IConfigurationSettingsHandler`1.SettingsLocal">
            <summary>
            Gets the settings local.
            </summary>
            <value>
            The settings local.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.Interfaces.IConfigurationSettingsHandler`1.LastKnownGoodSettingsLocal">
            <summary>
            Gets the last known good settings local.
            </summary>
            <value>
            The last known good settings local.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.Interfaces.IConfigurationSettingsHandler`1.DefaultConfigurationFile">
            <summary>
            Gets or sets the default configuration file.
            </summary>
            <value>
            The default configuration file.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.Interfaces.IConfigurationSettingsHandler`1.UseLocalConfiguration">
            <summary>
            Gets or sets a value indicating whether [use local configuration].
            </summary>
            <value>
            	<c>true</c> if [use local configuration]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.Interfaces.IConfigurationSettingsHandler`1.RestartOnExternalChanges">
            <summary>
            Gets or sets a value indicating whether [restart on external changes].
            </summary>
            <value>
            	<c>true</c> if [restart on external changes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Forge.Configuration.Shared.Interfaces.IConfigurationSettingsHandler`1.RefreshInstance">
            <summary>
            Refreshes the instance.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.Interfaces.IConfigurationSettingsHandler`1.SaveInstance(System.Configuration.ConfigurationSaveMode)">
            <summary>
            Saves the instance.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="T:Forge.Configuration.Shared.InvalidConfigurationException">
            <summary>
            Exception for invalid configuration scenarios
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.InvalidConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.InvalidConfigurationException" /> class.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.InvalidConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.InvalidConfigurationException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Forge.Configuration.Shared.InvalidConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.InvalidConfigurationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Forge.Configuration.Shared.InvalidConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.InvalidConfigurationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="T:Forge.Configuration.Shared.InvalidConfigurationValueException">
            <summary>
            Exception for invalid configuration scenario
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.InvalidConfigurationValueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.InvalidConfigurationValueException" /> class.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.InvalidConfigurationValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.InvalidConfigurationValueException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Forge.Configuration.Shared.InvalidConfigurationValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.InvalidConfigurationValueException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="M:Forge.Configuration.Shared.InvalidConfigurationValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.InvalidConfigurationValueException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Forge.Configuration.Shared.SharedConfigSettings`2">
             <summary>
             Shared configuration for local configuration handler classes
             <example>
             <code>
             [SecurityPermission(SecurityAction.Demand, Unrestricted = true)]
             public class StorageConfiguration : Forge.Base.Configuration.Shared.SharedConfigSettings&lt;StorageSection, StorageConfiguration&gt;
             {
            
                 #region Constructors
            
                 /// <summary>
                 /// Initializes the &lt;see cref="StorageConfiguration"/&gt; class.
                 /// </summary>
                 static StorageConfiguration()
                 {
                     LOG_PREFIX = "HIBERNATE_STORAGE_PROVIDER";
                 }
            
                 /// <summary>
                 /// Initializes a new instance of the &lt;see cref="StorageConfiguration"/&gt; class.
                 /// </summary>
                 public StorageConfiguration()
                     : base()
                 {
                 }
            
                 #endregion
             
             }
             </code>
             </example>
             </summary>
             <typeparam name="TSectionType">The type of the section type.</typeparam>
             <typeparam name="TSectionHandlerType">The type of the section handler type.</typeparam>
        </member>
        <member name="F:Forge.Configuration.Shared.SharedConfigSettings`2.LOGGER">
            <summary>
            Logger
            </summary>
        </member>
        <member name="F:Forge.Configuration.Shared.SharedConfigSettings`2.mConfigHandler">
            <summary>
            Configuratino handler for the specified type of section
            </summary>
        </member>
        <member name="F:Forge.Configuration.Shared.SharedConfigSettings`2.LOG_PREFIX">
            <summary>
            Log prefix for logging
            </summary>
        </member>
        <member name="F:Forge.Configuration.Shared.SharedConfigSettings`2.mSettings">
            <summary>
            Instance of the configuration section
            </summary>
        </member>
        <member name="F:Forge.Configuration.Shared.SharedConfigSettings`2.mLastKnownGoodSettings">
            <summary>
            The last known good section instance
            </summary>
        </member>
        <member name="F:Forge.Configuration.Shared.SharedConfigSettings`2.mConfig">
            <summary>
            The configuration
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.#cctor">
            <summary>
            Initializes the <see cref="T:Forge.Configuration.Shared.SharedConfigSettings`2"/> class.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Configuration.Shared.SharedConfigSettings`2"/> class.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Forge.Configuration.Shared.SharedConfigSettings`2"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Forge.Configuration.Shared.SharedConfigSettings`2.UserLevelModeForLoading">
            <summary>
            Gets or sets the user level modefor loading.
            </summary>
            <value>
            The user level modefor loading.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.SharedConfigSettings`2.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.SharedConfigSettings`2.LastKnownGoodSettings">
            <summary>
            Gets the last known good settings.
            </summary>
            <value>
            The last known good settings.
            </value>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.Refresh">
            <summary>
            Refreshes the configuration.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.Save(System.Configuration.ConfigurationSaveMode)">
            <summary>
            Saves the specified mode.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="P:Forge.Configuration.Shared.SharedConfigSettings`2.SectionHandler">
            <summary>
            Gets the section handler.
            </summary>
            <value>
            The section handler.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.SharedConfigSettings`2.HasConfigurationFile">
            <summary>
            Gets a value indicating whether this instance has configuration file.
            </summary>
            <value>
            <c>true</c> if this instance has configuration file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.SharedConfigSettings`2.DefaultConfigurationFile">
            <summary>
            Gets or sets the default configuration file.
            </summary>
            <value>
            The default configuration file.
            </value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="P:Forge.Configuration.Shared.SharedConfigSettings`2.SettingsLocal">
            <summary>
            Gets the settings local.
            </summary>
            <value>
            The settings local.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.SharedConfigSettings`2.LastKnownGoodSettingsLocal">
            <summary>
            Gets the last known good settings local.
            </summary>
            <value>
            The last known good settings local.
            </value>
        </member>
        <member name="P:Forge.Configuration.Shared.SharedConfigSettings`2.RestartOnExternalChanges">
            <summary>
            Gets or sets a value indicating whether [restart on external changes].
            </summary>
            <value>
            	<c>true</c> if [restart on external changes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.RefreshInstance">
            <summary>
            Refreshes the instance.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.SaveInstance(System.Configuration.ConfigurationSaveMode)">
            <summary>
            Saves the instance.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.CreateSection">
            <summary>
            Creates the section.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.LoadFactoryDefaults">
            <summary>
            Loads the factory defaults.
            </summary>
            <returns>The section</returns>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.Validate">
            <summary>
            Validates this instance values manually.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.StartConfigWatcher">
            <summary>
            Starts the config watcher.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.FSWatcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handles the Changed event of the FSWatcher control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.IO.FileSystemEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.UseGlobalConfigurationFile(System.String,System.Boolean)">
            <summary>
            Check you can use your local configuration file.
            </summary>
            <param name="myConfigurationFile">The local configuration file, which you want to use.</param>
            <param name="useLocalConfiguration">The flag is true if you want to use your configuration file. Global settings can override this and order you to use the globals.</param>
            <returns>True, if use the global config file</returns>
            <exception cref="T:System.ArgumentNullException">myConfigurationFile</exception>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.SharedConfigSettings`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Forge.Configuration.Shared.Validators">
            <summary>
            Validators for built-in configuration structure
            </summary>
        </member>
        <member name="M:Forge.Configuration.Shared.Validators.CategoryPropertyItemsValidator(Forge.Configuration.Shared.CategoryPropertyItems)">
            <summary>
            Categories the property items validator.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Id
            or
            </exception>
        </member>
        <member name="T:Forge.Action">
            <summary>
            Void delegate without parameter
            </summary>
        </member>
        <member name="T:Forge.Action`1">
            <summary>
            Void delegate with parameter
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="p1">The p1.</param>
        </member>
        <member name="T:Forge.Action`2">
            <summary>
            Void delegate with parameters
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
        </member>
        <member name="T:Forge.Action`3">
            <summary>
            Void delegate with parameters
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
        </member>
        <member name="T:Forge.Action`4">
            <summary>
            Void delegate with parameters
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
        </member>
        <member name="T:Forge.Action`5">
            <summary>
            Void delegate with parameters
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
        </member>
        <member name="T:Forge.Action`6">
            <summary>
            Void delegate with parameters
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
        </member>
        <member name="T:Forge.Action`7">
            <summary>
            Void delegate with parameters
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
        </member>
        <member name="T:Forge.Action`8">
            <summary>
            Void delegate with parameters
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="T8">The type of the 8.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
            <param name="p8">The p8.</param>
        </member>
        <member name="T:Forge.Func`1">
            <summary>
            Function delegate without parameter
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>TResult</returns>
        </member>
        <member name="T:Forge.Func`2">
            <summary>
            Function delegate with parameter(s)
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="p1">The p1.</param>
            <returns>TResult</returns>
        </member>
        <member name="T:Forge.Func`3">
            <summary>
            Function delegate with parameter(s)
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>TResult</returns>
        </member>
        <member name="T:Forge.Func`4">
            <summary>
            Function delegate with parameter(s)
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <returns>TResult</returns>
        </member>
        <member name="T:Forge.Func`5">
            <summary>
            Function delegate with parameter(s)
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <returns>TResult</returns>
        </member>
        <member name="T:Forge.Func`6">
            <summary>
            Function delegate with parameter(s)
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <returns>TResult</returns>
        </member>
        <member name="T:Forge.Func`7">
            <summary>
            Function delegate with parameter(s)
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <returns>TResult</returns>
        </member>
        <member name="T:Forge.Func`8">
            <summary>
            Function delegate with parameter(s)
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
            <returns>TResult</returns>
        </member>
        <member name="T:Forge.Func`9">
            <summary>
            Function delegate with parameter(s)
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="T8">The type of the 8.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
            <param name="p8">The p8.</param>
            <returns>TResult</returns>
        </member>
        <member name="T:Forge.EventRaiser.DelegateInvokeResult">
            <summary>
            Result of invocation
            </summary>
        </member>
        <member name="M:Forge.EventRaiser.DelegateInvokeResult.#ctor(System.Delegate,System.Object[],System.Collections.Generic.List{System.Object},System.Boolean,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.EventRaiser.DelegateInvokeResult"/> class.
            </summary>
            <param name="del">The del.</param>
            <param name="parameters">The parameters.</param>
            <param name="results">The results.</param>
            <param name="controlInvoke">if set to <c>true</c> [control invoke].</param>
            <param name="parallelInvocation">if set to <c>true</c> [parallel invocation].</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Forge.EventRaiser.DelegateInvokeResult.Delegate">
            <summary>
            Gets the delegate.
            </summary>
            <value>
            The delegate.
            </value>
        </member>
        <member name="P:Forge.EventRaiser.DelegateInvokeResult.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Forge.EventRaiser.DelegateInvokeResult.ControlInvoke">
            <summary>
            Gets a value indicating whether [control invoke].
            </summary>
            <value>
              <c>true</c> if [control invoke]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.EventRaiser.DelegateInvokeResult.ParallelInvocation">
            <summary>
            Gets a value indicating whether [parallel invocation].
            </summary>
            <value>
              <c>true</c> if [parallel invocation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.EventRaiser.DelegateInvokeResult.ResultList">
            <summary>
            Gets the result list.
            </summary>
            <value>
            The result list.
            </value>
        </member>
        <member name="P:Forge.EventRaiser.DelegateInvokeResult.State">
            <summary>
            Gets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="T:Forge.EventRaiser.AsyncRaiserCallback">
            <summary>
            Sync and async delegate caller which keep the order of the caller threads
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:Forge.EventRaiser.Raiser">
            <summary>
            Sync and async delegate caller which keep the order of the caller threads
            </summary>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.CallDelegatorByAsync(System.Delegate,System.Object[])">
            <summary>
            Calls the provided delegate asynchronously.
            </summary>
            <param name="dl">Delegate to raise</param>
            <param name="parameters">Parameter list of the target method</param>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.CallDelegatorByAsync(System.Delegate,System.Object[],Forge.EventRaiser.AsyncRaiserCallback,System.Object)">
            <summary>
            Calls the provided delegate asynchronously.
            </summary>
            <param name="dl">Delegate to raise</param>
            <param name="parameters">Parameter list of the target method</param>
            <param name="callback">Specify a callback method, if you want to receive results</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.CallDelegatorByAsync(System.Delegate,System.Object[],System.Boolean)">
            <summary>
            Calls the provided delegate asynchronously.
            </summary>
            <param name="dl">Delegate to raise</param>
            <param name="parameters">Parameter list of the target method</param>
            <param name="controlInvoke">Call UI thread if the target object is a control in the InvocationList</param>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.CallDelegatorByAsync(System.Delegate,System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Calls the provided delegate asynchronously.
            </summary>
            <param name="dl">Delegate to raise</param>
            <param name="parameters">Parameter list of the target method</param>
            <param name="controlInvoke">Call UI thread if the target object is a control in the InvocationList</param>
            <param name="parallelInvocation">Execute invocation list within a separated thread</param>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.CallDelegatorByAsync(System.Delegate,System.Object[],System.Boolean,System.Boolean,Forge.EventRaiser.AsyncRaiserCallback,System.Object)">
            <summary>
            Calls the provided delegate asynchronously.
            </summary>
            <param name="dl">Delegate to raise</param>
            <param name="parameters">Parameter list of the target method</param>
            <param name="controlInvoke">Call UI thread if the target object is a control in the InvocationList</param>
            <param name="parallelInvocation">Execute invocation list within a separated thread</param>
            <param name="callback">Specify a callback method, if you want to receive results</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.CallDelegatorBySync(System.Delegate,System.Object[])">
            <summary>
            Calls the provided delegate synchronously.
            </summary>
            <param name="dl">Delegate to raise</param>
            <param name="parameters">Parameter list of the target method</param>
            <returns>List of results which collected from the subscribers</returns>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.CallDelegatorBySync(System.Delegate,System.Object[],System.Boolean)">
            <summary>
            Calls the provided delegate synchronously.
            </summary>
            <param name="dl">Delegate to raise</param>
            <param name="parameters">Parameter list of the target method</param>
            <param name="controlInvoke">Call UI thread if the target object is a control in the InvocationList</param>
            <returns>List of results which collected from the subscribers</returns>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.CallDelegatorBySync(System.Delegate,System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Calls the provided delegate synchronously.
            </summary>
            <param name="dl">Delegate to raise</param>
            <param name="parameters">Parameter list of the target method</param>
            <param name="controlInvoke">Call UI thread if the target object is a control in the InvocationList</param>
            <param name="parallelInvocation">Execute invocation list within a separated thread</param>
            <returns>
            List of results which collected from the subscribers
            </returns>
        </member>
        <member name="P:Forge.EventRaiser.Raiser.ExecutionThreadRunningTime">
            <summary>
            Get or set the maximum execution time of event invoker thread in milliseconds
            </summary>
            <value>
            The execution thread running time.
            </value>
            <exception cref="T:System.ArgumentException">Set value greater than zero</exception>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.TypeContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.EventRaiser.Raiser.TypeContainer"/> class.
            </summary>
        </member>
        <member name="P:Forge.EventRaiser.Raiser.TypeContainer.Thread">
            <summary>
            Gets or sets the thread.
            </summary>
            <value>
            The thread.
            </value>
        </member>
        <member name="P:Forge.EventRaiser.Raiser.TypeContainer.ExecutorThreadSemaphore">
            <summary>
            Gets the executor thread semaphore.
            </summary>
        </member>
        <member name="P:Forge.EventRaiser.Raiser.TypeContainer.Queue">
            <summary>
            Gets the queue.
            </summary>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.TypeContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.EventDataContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.EventRaiser.Raiser.EventDataContainer"/> class.
            </summary>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.EventDataContainer.#ctor(System.Delegate,System.Object[],System.Boolean,System.Boolean,Forge.EventRaiser.AsyncRaiserCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.EventRaiser.Raiser.EventDataContainer"/> class.
            </summary>
            <param name="del">The del.</param>
            <param name="parameters">The parameters.</param>
            <param name="controlInvoke">if set to <c>true</c> [control invoke].</param>
            <param name="parallelInvocation">if set to <c>true</c> [parallel invocation].</param>
            <param name="callBack">The call back.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Forge.EventRaiser.Raiser.EventDataContainer.Delegate">
            <summary>
            Gets the delegate.
            </summary>
        </member>
        <member name="P:Forge.EventRaiser.Raiser.EventDataContainer.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="P:Forge.EventRaiser.Raiser.EventDataContainer.CallBack">
            <summary>
            Gets the call back.
            </summary>
        </member>
        <member name="P:Forge.EventRaiser.Raiser.EventDataContainer.ControlInvoke">
            <summary>
            Gets a value indicating whether [control invoke].
            </summary>
            <value>
              <c>true</c> if [control invoke]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.EventRaiser.Raiser.EventDataContainer.ParallelInvocation">
            <summary>
            Gets a value indicating whether [parallel invocation].
            </summary>
            <value>
              <c>true</c> if [parallel invocation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.EventRaiser.Raiser.EventDataContainer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.EventDataContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.AsyncInvocationContainer.Execute(System.Delegate[],System.Object[],System.Boolean)">
            <summary>
            Executes the specified invocation list.
            </summary>
            <param name="invocationList">The invocation list.</param>
            <param name="parameters">The parameters.</param>
            <param name="controlInvoke">if set to <c>true</c> [control invoke].</param>
            <returns></returns>
        </member>
        <member name="M:Forge.EventRaiser.Raiser.AsyncInvocationContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Forge.EventRaiser.TypeNameResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.EventRaiser.TypeNameResolver"/> class.
            </summary>
        </member>
        <member name="P:Forge.EventRaiser.TypeNameResolver.CallerTypeName">
            <summary>
            Gets the name of the caller type.
            </summary>
            <value>
            The name of the caller type.
            </value>
        </member>
        <member name="T:Forge.HashGeneratorHelper">
            <summary>
            Helps generate hash codes
            </summary>
        </member>
        <member name="M:Forge.HashGeneratorHelper.GetSHA256BasedValue(System.String)">
            <summary>
            Gets the SHA 256 based value of the input string and convert it to a long representation.
            </summary>
            <param name="input">The input.</param>
            <returns>The long value</returns>
            <example>
            <code>
            public EntityVersion(string deviceId)
            {
                if (String.IsNullOrEmpty(deviceId))
                {
                    ThrowHelper.ThrowArgumentNullException("deviceId");
                }
                this.versionDeviceId = EFUtils.GetSHA256BasedValue(deviceId);
            }
            </code>
            </example>
        </member>
        <member name="T:Forge.InitializationException">
            <summary>
            Exception for initialization fail scenario
            </summary>
        </member>
        <member name="M:Forge.InitializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.InitializationException"/> class.
            </summary>
        </member>
        <member name="M:Forge.InitializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.InitializationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Forge.InitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.InitializationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Forge.InitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.InitializationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="T:Forge.Persistence.Formatters.BinaryFormatter`1">
            <summary>
            Serialize data into binary format
            </summary>
            <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="M:Forge.Persistence.Formatters.BinaryFormatter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.BinaryFormatter`1"/> class.
            </summary>
        </member>
        <member name="M:Forge.Persistence.Formatters.BinaryFormatter`1.#ctor(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.Formatters.FormatterTypeStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.BinaryFormatter`1"/> class.
            </summary>
            <param name="topObjectFormat">The top object format.</param>
            <param name="typeFormat">The type format.</param>
        </member>
        <member name="P:Forge.Persistence.Formatters.BinaryFormatter`1.TopObjectFormat">
            <summary>
            Gets or sets the top object format.
            </summary>
            <value>
            The top object format.
            </value>
        </member>
        <member name="P:Forge.Persistence.Formatters.BinaryFormatter`1.TypeFormat">
            <summary>
            Gets or sets the type format.
            </summary>
            <value>
            The type format.
            </value>
        </member>
        <member name="M:Forge.Persistence.Formatters.BinaryFormatter`1.CanRead(System.IO.Stream)">
            <summary>
            Determines whether this instance can read the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
              <c>true</c> if this instance can read the specified stream; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.BinaryFormatter`1.CanWrite(`0)">
            <summary>
            Determines whether this instance can write the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if this instance can write the specified item; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.BinaryFormatter`1.Read(System.IO.Stream)">
            <summary>
            Reads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.BinaryFormatter`1.Write(System.IO.Stream,`0)">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentNullException">
            stream
            or
            data
            </exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.BinaryFormatter`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Forge.Persistence.Formatters.GZipFormatter">
            <summary>
            GZip Formatter
            </summary>
        </member>
        <member name="M:Forge.Persistence.Formatters.GZipFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.GZipFormatter"/> class.
            </summary>
        </member>
        <member name="M:Forge.Persistence.Formatters.GZipFormatter.CanRead(System.IO.Stream)">
            <summary>
            Determines whether this instance can read the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
              <c>true</c> if this instance can read the specified stream; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.GZipFormatter.CanWrite(System.Byte[])">
            <summary>
            Determines whether this instance can write the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if this instance can write the specified item; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.GZipFormatter.Read(System.IO.Stream)">
            <summary>
            Reads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.GZipFormatter.Write(System.IO.Stream,System.Byte[])">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentNullException">
            stream
            or
            data
            </exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.GZipFormatter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Forge.Persistence.Formatters.IDataFormatter`1">
            <summary>
            Service interface for formatters
            </summary>
            <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="M:Forge.Persistence.Formatters.IDataFormatter`1.CanRead(System.IO.Stream)">
            <summary>
            Indicate the content of the stream is deserializable
            </summary>
            <param name="stream">Content stream</param>
            <returns>
            true if the content is deserializable
            </returns>
        </member>
        <member name="M:Forge.Persistence.Formatters.IDataFormatter`1.CanWrite(`0)">
            <summary>
            Indicate that the item is serializable with the current formatter
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if this instance can write the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Persistence.Formatters.IDataFormatter`1.Read(System.IO.Stream)">
            <summary>
            Deserialize the content of the stream
            </summary>
            <param name="stream">Content stream</param>
            <returns>
            T object
            </returns>
        </member>
        <member name="M:Forge.Persistence.Formatters.IDataFormatter`1.Write(System.IO.Stream,`0)">
            <summary>
            Serializable the provided object into the supplied stream
            </summary>
            <param name="stream">Stream that the serialized data has been written</param>
            <param name="data">Object that will be serialized</param>
        </member>
        <member name="T:Forge.Persistence.Formatters.RijndaelByteArrayFormatter">
            <summary>
            Rijndael formatter
            </summary>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelByteArrayFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.RijndaelByteArrayFormatter"/> class.
            </summary>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelByteArrayFormatter.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.RijndaelByteArrayFormatter"/> class.
            </summary>
            <param name="iv">The iv.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">
            iv
            or
            key
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            </exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelByteArrayFormatter.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.RijndaelByteArrayFormatter" /> class.
            </summary>
            <param name="certificate">The certificate.</param>
        </member>
        <member name="P:Forge.Persistence.Formatters.RijndaelByteArrayFormatter.Certificate">
            <summary>
            Gets or sets the certificate.
            </summary>
            <value>
            The certificate.
            </value>
        </member>
        <member name="P:Forge.Persistence.Formatters.RijndaelByteArrayFormatter.IV">
            <summary>
            Gets or sets the iv.
            </summary>
            <value>
            The iv.
            </value>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="P:Forge.Persistence.Formatters.RijndaelByteArrayFormatter.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelByteArrayFormatter.CanRead(System.IO.Stream)">
            <summary>
            Determines whether this instance can read the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
              <c>true</c> if this instance can read the specified stream; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelByteArrayFormatter.CanWrite(System.IO.Stream)">
            <summary>
            Determines whether this instance can write the specified item.
            </summary>
            <param name="sourceStream">The item.</param>
            <returns>
              <c>true</c> if this instance can write the specified item; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelByteArrayFormatter.Read(System.IO.Stream)">
            <summary>
            Reads the specified stream.
            </summary>
            <param name="sourceStream">The stream.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelByteArrayFormatter.Write(System.IO.Stream,System.IO.Stream)">
            <summary>
            Writes the specified source stream content into the target stream.
            </summary>
            <param name="targetStream">The targetStream.</param>
            <param name="sourceStream">The sourceStream.</param>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.ArgumentNullException">stream
            or
            data</exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelByteArrayFormatter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Forge.Persistence.Formatters.RijndaelFormatter`1">
            <summary>
            X509 Binary serializer formatter
            </summary>
            <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelFormatter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.RijndaelFormatter`1"/> class.
            </summary>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelFormatter`1.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.RijndaelFormatter`1"/> class.
            </summary>
            <param name="iv">The iv.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">
            iv
            or
            key
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            </exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelFormatter`1.#ctor(System.Byte[],System.Byte[],Forge.Persistence.Formatters.IDataFormatter{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.RijndaelFormatter`1"/> class.
            </summary>
            <param name="iv">The iv.</param>
            <param name="key">The key.</param>
            <param name="internalFormatter">The internal formatter.</param>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelFormatter`1.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.RijndaelFormatter`1" /> class.
            </summary>
            <param name="certificate">The certificate.</param>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelFormatter`1.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,Forge.Persistence.Formatters.IDataFormatter{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.RijndaelFormatter`1" /> class.
            </summary>
            <param name="certificate">The certificate.</param>
            <param name="internalFormatter">The internal formatter.</param>
        </member>
        <member name="P:Forge.Persistence.Formatters.RijndaelFormatter`1.Certificate">
            <summary>
            Gets or sets the certificate.
            </summary>
            <value>
            The certificate.
            </value>
        </member>
        <member name="P:Forge.Persistence.Formatters.RijndaelFormatter`1.InternalFormatter">
            <summary>
            Gets or sets the internal formatter.
            </summary>
            <value>
            The internal formatter.
            </value>
        </member>
        <member name="P:Forge.Persistence.Formatters.RijndaelFormatter`1.IV">
            <summary>
            Gets or sets the iv.
            </summary>
            <value>
            The iv.
            </value>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="P:Forge.Persistence.Formatters.RijndaelFormatter`1.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelFormatter`1.CanRead(System.IO.Stream)">
            <summary>
            Determines whether this instance can read the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
              <c>true</c> if this instance can read the specified stream; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelFormatter`1.CanWrite(`0)">
            <summary>
            Determines whether this instance can write the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if this instance can write the specified item; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelFormatter`1.Read(System.IO.Stream)">
            <summary>
            Reads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelFormatter`1.Write(System.IO.Stream,`0)">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentNullException">
            stream
            or
            data
            </exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.RijndaelFormatter`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Forge.Persistence.Formatters.XmlDataFormatter`1">
            <summary>
            Serialize object into XML format
            </summary>
            <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlDataFormatter`1.#cctor">
            <summary>
            Initializes the <see cref="T:Forge.Persistence.Formatters.XmlDataFormatter`1"/> class.
            </summary>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlDataFormatter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.XmlDataFormatter`1"/> class.
            </summary>
        </member>
        <member name="P:Forge.Persistence.Formatters.XmlDataFormatter`1.DefaultEncoding">
            <summary>
            Gets or sets the default encoding for XmlDataFormatter instances.
            </summary>
            <value>
            The default encoding.
            </value>
        </member>
        <member name="P:Forge.Persistence.Formatters.XmlDataFormatter`1.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
            <value>
            The encoding.
            </value>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlDataFormatter`1.CanRead(System.IO.Stream)">
            <summary>
            Determines whether this instance can read the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
              <c>true</c> if this instance can read the specified stream; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlDataFormatter`1.CanWrite(`0)">
            <summary>
            Determines whether this instance can write the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if this instance can write the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlDataFormatter`1.Read(System.IO.Stream)">
            <summary>
            Reads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlDataFormatter`1.Write(System.IO.Stream,`0)">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentNullException">
            stream
            or
            data
            </exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlDataFormatter`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Forge.Persistence.Formatters.XmlSoapFormatter`1">
            <summary>
            Soap Formatter
            </summary>
            <typeparam name="T">Generic type</typeparam>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlSoapFormatter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Persistence.Formatters.XmlSoapFormatter`1"/> class.
            </summary>
        </member>
        <member name="P:Forge.Persistence.Formatters.XmlSoapFormatter`1.TopObjectFormat">
            <summary>
            Gets or sets the top object format.
            </summary>
            <value>
            The top object format.
            </value>
        </member>
        <member name="P:Forge.Persistence.Formatters.XmlSoapFormatter`1.TypeFormat">
            <summary>
            Gets or sets the type format.
            </summary>
            <value>
            The type format.
            </value>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlSoapFormatter`1.CanRead(System.IO.Stream)">
            <summary>
            Determines whether this instance can read the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
              <c>true</c> if this instance can read the specified stream; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlSoapFormatter`1.CanWrite(`0)">
            <summary>
            Determines whether this instance can write the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if this instance can write the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlSoapFormatter`1.Read(System.IO.Stream)">
            <summary>
            Reads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlSoapFormatter`1.Write(System.IO.Stream,`0)">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Forge.Persistence.Formatters.XmlSoapFormatter`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Forge.Reflection.ExtractObjectData">
            <summary>
            Mine data from private field of an object. This class used by the infrastructure.
            </summary>
        </member>
        <member name="M:Forge.Reflection.ExtractObjectData.#ctor(System.String)">
            <summary>
            Prevents a default instance of the <see cref="T:Forge.Reflection.ExtractObjectData"/> class from being created.
            </summary>
            <param name="fieldOrPropertyName">Name of the field or property.</param>
        </member>
        <member name="M:Forge.Reflection.ExtractObjectData.Create(System.String)">
            <summary>
            Creates the specified field name.
            </summary>
            <param name="fieldOrPropertyName">Name of the field or property.</param>
            <returns></returns>
        </member>
        <member name="M:Forge.Reflection.ExtractObjectData.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="o">The o.</param>
            <returns></returns>
        </member>
        <member name="M:Forge.Reflection.ExtractObjectData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Reflection.ExtractObjectData.Equals(Forge.Reflection.ExtractObjectData)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Forge.Reflection.ExtractObjectData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Forge.Reflection.ExtractObjectData.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Reflection.TypeHelper">
            <summary>
            Helps to resolve a type from an assembly. Supports assembly dynamic loads.
            </summary>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.#cctor">
            <summary>
            Initializes the <see cref="T:Forge.Reflection.TypeHelper"/> class.
            </summary>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetTypeFromString(System.String)">
             <summary>
             Gets the type from string.
             </summary>
             <param name="assemblyFullQualifiedName">Name of the assembly full qualified.</param>
             <returns>The type if it was resolved, otherwise False.</returns>
             <example>
             <code>
             Type type = null;
            
             type = TypeHelper.GetTypeFromString("System.Int32", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]][,]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;[]).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, TypeLookupModeEnum.AllowAll, true, false, false);
             Assert.IsFalse(type == null);
             </code>
             </example>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetTypeFromString(System.String,System.Boolean)">
             <summary>
             Gets the type from string.
             </summary>
             <param name="assemblyFullQualifiedName">Name of the assembly full qualified.</param>
             <param name="allowDifferentTypeVersion">if set to <c>true</c> [allow different type version].</param>
             <returns>
             The type if it was resolved, otherwise False.
             </returns>
             <example>
             <code>
             Type type = null;
            
             type = TypeHelper.GetTypeFromString("System.Int32", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]][,]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;[]).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, TypeLookupModeEnum.AllowAll, true, false, false);
             Assert.IsFalse(type == null);
             </code>
             </example>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetTypeFromString(System.String,Forge.Reflection.TypeLookupModeEnum)">
             <summary>
             Gets the type from string.
             </summary>
             <param name="assemblyFullQualifiedName">Name of the assembly full qualified.</param>
             <param name="typeLookupMode">The type lookup mode.</param>
             <returns>The type if it was resolved, otherwise False.</returns>
             <example>
             <code>
             Type type = null;
            
             type = TypeHelper.GetTypeFromString("System.Int32", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]][,]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;[]).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, TypeLookupModeEnum.AllowAll, true, false, false);
             Assert.IsFalse(type == null);
             </code>
             </example>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetTypeFromString(System.String,Forge.Reflection.TypeLookupModeEnum,System.Boolean)">
             <summary>
             Gets the type from string.
             </summary>
             <param name="assemblyFullQualifiedName">Name of the assembly full qualified.</param>
             <param name="typeLookupMode">The type lookup mode.</param>
             <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
             <returns>The type if it was resolved, otherwise False.</returns>
             <example>
             <code>
             Type type = null;
            
             type = TypeHelper.GetTypeFromString("System.Int32", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]][,]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;[]).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, TypeLookupModeEnum.AllowAll, true, false, false);
             Assert.IsFalse(type == null);
             </code>
             </example>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetTypeFromString(System.String,Forge.Reflection.TypeLookupModeEnum,System.Boolean,System.Boolean)">
             <summary>
             Gets the type from string.
             </summary>
             <param name="assemblyFullQualifiedName">Name of the assembly full qualified.</param>
             <param name="typeLookupMode">The type lookup mode.</param>
             <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
             <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
             <returns>The type if it was resolved, otherwise False.</returns>
             <example>
             <code>
             Type type = null;
            
             type = TypeHelper.GetTypeFromString("System.Int32", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]][,]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;[]).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, TypeLookupModeEnum.AllowAll, true, false, false);
             Assert.IsFalse(type == null);
             </code>
             </example>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetTypeFromString(System.String,Forge.Reflection.TypeLookupModeEnum,System.Boolean,System.Boolean,System.Boolean)">
             <summary>
             Gets the type from string.
             </summary>
             <param name="assemblyFullQualifiedName">Name of the assembly full qualified.</param>
             <param name="typeLookupMode">The type lookup mode.</param>
             <param name="findNewestTypeVersion">Find the newest version from a type is mandatory or not.</param>
             <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
             <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
             <returns>The type if it was resolved, otherwise False.</returns>
             <example>
             <code>
             Type type = null;
            
             type = TypeHelper.GetTypeFromString("System.Int32", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString("System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int64]][,]", true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;[]).AssemblyQualifiedName);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, true);
             Assert.IsFalse(type == null);
            
             type = TypeHelper.GetTypeFromString(typeof(HashSet&lt;int?&gt;[][,]).AssemblyQualifiedName, TypeLookupModeEnum.AllowAll, true, false, false);
             Assert.IsFalse(type == null);
             </code>
             </example>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetAttribute``1(System.Type)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="T">Type of the Attribute</typeparam>
            <param name="type">The type.</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetAttribute``1(System.Reflection.MethodInfo)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="T">Type of the Attribute</typeparam>
            <param name="mi">The mi.</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetAttribute``1(System.Reflection.FieldInfo)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="T">Type of the Attribute</typeparam>
            <param name="fi">The fi.</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetAttributes``1(System.Type)">
            <summary>
            Gets the attributes.
            </summary>
            <typeparam name="T">Type of the Attribute</typeparam>
            <param name="type">The type.</param>
            <returns>The attribute or empty collection</returns>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetAttributes``1(System.Reflection.MethodInfo)">
            <summary>
            Gets the attributes.
            </summary>
            <typeparam name="T">Type of the Attribute</typeparam>
            <param name="mi">The mi.</param>
            <returns>The attribute or empty collection</returns>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetAttributes``1(System.Reflection.FieldInfo)">
            <summary>
            Gets the attributes.
            </summary>
            <typeparam name="T">Type of the Attribute</typeparam>
            <param name="fi">The fi.</param>
            <returns>The attribute or empty collection</returns>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetFieldByName(System.Object,System.String)">
            <summary>
            Gets the field by name.
            </summary>
            <param name="o">The object</param>
            <param name="name">The field name</param>
            <exception cref="T:System.MissingFieldException">Throws when the field with the specified name in the object was not found.</exception>
            <returns>FieldInfo</returns>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.GetPropertyByName(System.Object,System.String)">
            <summary>
            Gets the property by name.
            </summary>
            <param name="o">The object</param>
            <param name="name">The property name</param>
            <returns>The property info</returns>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.TypeKey.#ctor(System.Reflection.AssemblyName,System.String,Forge.Reflection.TypeLookupModeEnum,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Reflection.TypeHelper.TypeKey" /> class.
            </summary>
            <param name="asmName">Name of the asm.</param>
            <param name="typeName">Name of the type.</param>
            <param name="typeLookupMode">The type lookup mode.</param>
            <param name="findNewestTypeVersion">if set to <c>true</c> [find newest type version].</param>
        </member>
        <member name="P:Forge.Reflection.TypeHelper.TypeKey.AsmName">
            <summary>
            Gets or sets the name of the asm.
            </summary>
            <value>
            The name of the asm.
            </value>
        </member>
        <member name="P:Forge.Reflection.TypeHelper.TypeKey.TypeName">
            <summary>
            Gets or sets the name of the type.
            </summary>
            <value>
            The name of the type.
            </value>
        </member>
        <member name="P:Forge.Reflection.TypeHelper.TypeKey.TypeLookupMode">
            <summary>
            Gets or sets the type lookup mode.
            </summary>
            <value>
            The type lookup mode.
            </value>
        </member>
        <member name="P:Forge.Reflection.TypeHelper.TypeKey.FindNewestTypeVersion">
            <summary>
            Gets or sets a value indicating whether [find newest type version].
            </summary>
            <value>
            <c>true</c> if [find newest type version]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.TypeKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Reflection.TypeHelper.TypeKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Forge.Reflection.TypeLookupModeEnum">
            <summary>
            Represents the type resolve mode for TypeHelper
            </summary>
        </member>
        <member name="F:Forge.Reflection.TypeLookupModeEnum.AllowOlderVersions">
            <summary>
            Allow older versions
            </summary>
        </member>
        <member name="F:Forge.Reflection.TypeLookupModeEnum.AllowExactVersions">
            <summary>
            Allow exact versions
            </summary>
        </member>
        <member name="F:Forge.Reflection.TypeLookupModeEnum.AllowNewerVersions">
            <summary>
            Allow newer versions
            </summary>
        </member>
        <member name="F:Forge.Reflection.TypeLookupModeEnum.AllowAll">
            <summary>
            Allow all
            </summary>
        </member>
        <member name="T:Forge.Threading.AtomicByte">
            <summary>
            A byte value that may be updated atomically.  See the
            An AtomicByte is used in applications such as atomically
            incremented sequence numbers, and cannot be used as a replacement
            for a byte.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicByte.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicByte"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicByte.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicByte"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Forge.Threading.AtomicByte.LongValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Byte.MaxValue ot less than Byte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicByte.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Byte.MaxValue ot less than Byte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicByte.ShortValue">
            <summary>
            Gets or sets the short value.
            </summary>
            <value>
            The short value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Byte.MaxValue ot less than Byte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicByte.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
            <value>
            The float value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Byte.MaxValue ot less than Byte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicByte.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>
            The double value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Byte.MaxValue ot less than Byte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicByte.DecimalValue">
            <summary>
            Gets or sets the decimal value.
            </summary>
            <value>
            The decimal value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Byte.MaxValue ot less than Byte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicByte.ByteValue">
            <summary>
            Gets or sets the byte value.
            </summary>
            <value>
            The sbyte value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Byte.MaxValue ot less than Byte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicByte.UShortValue">
            <summary>
            Gets or sets the ushort value.
            </summary>
            <value>
            The ushort value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Byte.MaxValue ot less than Byte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicByte.UIntValue">
            <summary>
            Gets or sets the uint value.
            </summary>
            <value>
            The uint value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Byte.MaxValue ot less than Byte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicByte.ULongValue">
            <summary>
            Gets or sets the ulong value.
            </summary>
            <value>
            The ulong value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Byte.MaxValue ot less than Byte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicByte.SByteValue">
            <summary>
            Gets or sets the sbyte value.
            </summary>
            <value>
            The sbyte value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Byte.MaxValue ot less than Byte.MinValue</exception>
        </member>
        <member name="M:Forge.Threading.AtomicByte.GetAndSet(System.Byte)">
            <summary>
            Gets the and set.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicByte.GetAndIncrement">
            <summary>
            Gets the and increment.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicByte.GetAndDecrement">
            <summary>
            Gets the and decrement.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicByte.GetAndAdd(System.Byte)">
            <summary>
            Gets the and add.
            </summary>
            <param name="delta">The delta.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicByte.IncrementAndGet">
            <summary>
            Increments the and get.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicByte.DecrementAndGet">
            <summary>
            Decrements the and get.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicByte.AddAndGet(System.Byte)">
            <summary>
            Adds the and get.
            </summary>
            <param name="delta">The delta.</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Forge.Threading.AtomicByte.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Threading.AtomicDecimal">
            <summary>
            A decimal value that may be updated atomically.  See the
            An AtomicDecimal is used in applications such as atomically
            incremented sequence numbers, and cannot be used as a replacement
            for a decimal.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicDecimal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicDecimal"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicDecimal.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicDecimal"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Forge.Threading.AtomicDecimal.LongValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Decimal.MaxValue ot less than Decimal.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicDecimal.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Decimal.MaxValue ot less than Decimal.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicDecimal.ShortValue">
            <summary>
            Gets or sets the short value.
            </summary>
            <value>
            The short value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Decimal.MaxValue ot less than Decimal.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicDecimal.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
            <value>
            The float value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Decimal.MaxValue ot less than Decimal.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicDecimal.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>
            The double value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Decimal.MaxValue ot less than Decimal.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicDecimal.DecimalValue">
            <summary>
            Gets or sets the decimal value.
            </summary>
            <value>
            The decimal value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicDecimal.ByteValue">
            <summary>
            Gets or sets the byte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicDecimal.UShortValue">
            <summary>
            Gets or sets the ushort value.
            </summary>
            <value>
            The ushort value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicDecimal.UIntValue">
            <summary>
            Gets or sets the uint value.
            </summary>
            <value>
            The uint value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicDecimal.ULongValue">
            <summary>
            Gets or sets the ulong value.
            </summary>
            <value>
            The ulong value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicDecimal.SByteValue">
            <summary>
            Gets or sets the sbyte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="M:Forge.Threading.AtomicDecimal.GetAndSet(System.Decimal)">
            <summary>
            Gets the and set.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDecimal.GetAndIncrement">
            <summary>
            Gets the and increment.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDecimal.GetAndDecrement">
            <summary>
            Gets the and decrement.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDecimal.GetAndAdd(System.Decimal)">
            <summary>
            Gets the and add.
            </summary>
            <param name="delta">The delta.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDecimal.IncrementAndGet">
            <summary>
            Increments the and get.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDecimal.DecrementAndGet">
            <summary>
            Decrements the and get.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDecimal.AddAndGet(System.Decimal)">
            <summary>
            Adds the and get.
            </summary>
            <param name="delta">The delta.</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Forge.Threading.AtomicDecimal.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Threading.AtomicDouble">
            <summary>
            A double value that may be updated atomically.  See the
            An AtomicDouble is used in applications such as atomically
            incremented sequence numbers, and cannot be used as a replacement
            for a double.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicDouble.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicDouble"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicDouble.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicDouble"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Forge.Threading.AtomicDouble.LongValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicDouble.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicDouble.ShortValue">
            <summary>
            Gets or sets the short value.
            </summary>
            <value>
            The short value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicDouble.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
            <value>
            The float value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicDouble.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>
            The double value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicDouble.DecimalValue">
            <summary>
            Gets or sets the decimal value.
            </summary>
            <value>
            The decimal value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicDouble.ByteValue">
            <summary>
            Gets or sets the byte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicDouble.UShortValue">
            <summary>
            Gets or sets the ushort value.
            </summary>
            <value>
            The ushort value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicDouble.UIntValue">
            <summary>
            Gets or sets the uint value.
            </summary>
            <value>
            The uint value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicDouble.ULongValue">
            <summary>
            Gets or sets the ulong value.
            </summary>
            <value>
            The ulong value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicDouble.SByteValue">
            <summary>
            Gets or sets the sbyte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="M:Forge.Threading.AtomicDouble.GetAndSet(System.Double)">
            <summary>
            Gets the and set.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDouble.GetAndIncrement">
            <summary>
            Gets the and increment.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDouble.GetAndDecrement">
            <summary>
            Gets the and decrement.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDouble.GetAndAdd(System.Double)">
            <summary>
            Gets the and add.
            </summary>
            <param name="delta">The delta.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDouble.IncrementAndGet">
            <summary>
            Increments the and get.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDouble.DecrementAndGet">
            <summary>
            Decrements the and get.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicDouble.AddAndGet(System.Double)">
            <summary>
            Adds the and get.
            </summary>
            <param name="delta">The delta.</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Forge.Threading.AtomicDouble.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Threading.AtomicFloat">
            <summary>
            A float value that may be updated atomically.  See the
            An AtomicFloat is used in applications such as atomically
            incremented sequence numbers, and cannot be used as a replacement
            for a float.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicFloat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicFloat"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicFloat.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicFloat"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Forge.Threading.AtomicFloat.LongValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Single.MaxValue ot less than Single.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicFloat.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Single.MaxValue ot less than Single.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicFloat.ShortValue">
            <summary>
            Gets or sets the short value.
            </summary>
            <value>
            The short value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicFloat.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
            <value>
            The float value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Single.MaxValue ot less than Single.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicFloat.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>
            The double value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Single.MaxValue ot less than Single.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicFloat.DecimalValue">
            <summary>
            Gets or sets the decimal value.
            </summary>
            <value>
            The decimal value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Single.MaxValue ot less than Single.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicFloat.ByteValue">
            <summary>
            Gets or sets the byte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicFloat.UShortValue">
            <summary>
            Gets or sets the ushort value.
            </summary>
            <value>
            The ushort value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicFloat.UIntValue">
            <summary>
            Gets or sets the uint value.
            </summary>
            <value>
            The uint value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicFloat.ULongValue">
            <summary>
            Gets or sets the ulong value.
            </summary>
            <value>
            The ulong value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicFloat.SByteValue">
            <summary>
            Gets or sets the sbyte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="M:Forge.Threading.AtomicFloat.GetAndSet(System.Single)">
            <summary>
            Gets the and set.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicFloat.GetAndIncrement">
            <summary>
            Gets the and increment.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicFloat.GetAndDecrement">
            <summary>
            Gets the and decrement.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicFloat.GetAndAdd(System.Int32)">
            <summary>
            Gets the and add.
            </summary>
            <param name="delta">The delta.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicFloat.IncrementAndGet">
            <summary>
            Increments the and get.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicFloat.DecrementAndGet">
            <summary>
            Decrements the and get.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicFloat.AddAndGet(System.Single)">
            <summary>
            Adds the and get.
            </summary>
            <param name="delta">The delta.</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Forge.Threading.AtomicFloat.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Threading.AtomicInt">
            <summary>
            An int value that may be updated atomically.  See the
            An AtomicInt is used in applications such as atomically
            incremented sequence numbers, and cannot be used as a replacement
            for an int.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicInt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicInt"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicInt.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicInt"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Forge.Threading.AtomicInt.LongValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Int32.MaxValue ot less than Int32.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicInt.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicInt.ShortValue">
            <summary>
            Gets or sets the short value.
            </summary>
            <value>
            The short value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicInt.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
            <value>
            The float value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Int32.MaxValue ot less than Int32.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicInt.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>
            The double value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Int32.MaxValue ot less than Int32.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicInt.DecimalValue">
            <summary>
            Gets or sets the decimal value.
            </summary>
            <value>
            The decimal value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Int32.MaxValue ot less than Int32.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicInt.ByteValue">
            <summary>
            Gets or sets the byte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicInt.UShortValue">
            <summary>
            Gets or sets the ushort value.
            </summary>
            <value>
            The ushort value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicInt.UIntValue">
            <summary>
            Gets or sets the uint value.
            </summary>
            <value>
            The uint value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than int.MaxValue ot less than int.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicInt.ULongValue">
            <summary>
            Gets or sets the ulong value.
            </summary>
            <value>
            The ulong value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than int.MaxValue ot less than int.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicInt.SByteValue">
            <summary>
            Gets or sets the sbyte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="M:Forge.Threading.AtomicInt.GetAndSet(System.Int32)">
            <summary>
            Gets the and set.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicInt.GetAndIncrement">
            <summary>
            Gets the and increment.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicInt.GetAndDecrement">
            <summary>
            Gets the and decrement.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicInt.GetAndAdd(System.Int32)">
            <summary>
            Gets the and add.
            </summary>
            <param name="delta">The delta.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicInt.IncrementAndGet">
            <summary>
            Increments the and get.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicInt.DecrementAndGet">
            <summary>
            Decrements the and get.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicInt.AddAndGet(System.Int32)">
            <summary>
            Adds the and get.
            </summary>
            <param name="delta">The delta.</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Forge.Threading.AtomicInt.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Threading.AtomicLong">
            <summary>
            A long value that may be updated atomically.  See the
            An AtomicLong is used in applications such as atomically
            incremented sequence numbers, and cannot be used as a replacement
            for a long.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicLong.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicLong"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicLong.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicLong"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Forge.Threading.AtomicLong.LongValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicLong.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicLong.ShortValue">
            <summary>
            Gets or sets the short value.
            </summary>
            <value>
            The short value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicLong.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
            <value>
            The float value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicLong.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>
            The double value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicLong.DecimalValue">
            <summary>
            Gets or sets the decimal value.
            </summary>
            <value>
            The decimal value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicLong.ByteValue">
            <summary>
            Gets or sets the byte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicLong.UShortValue">
            <summary>
            Gets or sets the ushort value.
            </summary>
            <value>
            The ushort value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicLong.UIntValue">
            <summary>
            Gets or sets the uint value.
            </summary>
            <value>
            The uint value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicLong.ULongValue">
            <summary>
            Gets or sets the ulong value.
            </summary>
            <value>
            The ulong value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than long.MaxValue ot less than long.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicLong.SByteValue">
            <summary>
            Gets or sets the sbyte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="M:Forge.Threading.AtomicLong.GetAndSet(System.Int64)">
            <summary>
            Gets the and set.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicLong.GetAndIncrement">
            <summary>
            Gets the and increment.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicLong.GetAndDecrement">
            <summary>
            Gets the and decrement.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicLong.GetAndAdd(System.Int64)">
            <summary>
            Gets the and add.
            </summary>
            <param name="delta">The delta.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicLong.IncrementAndGet">
            <summary>
            Increments the and get.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicLong.DecrementAndGet">
            <summary>
            Decrements the and get.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicLong.AddAndGet(System.Int64)">
            <summary>
            Adds the and get.
            </summary>
            <param name="delta">The delta.</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Forge.Threading.AtomicLong.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Threading.AtomicSByte">
            <summary>
            An sbyte value that may be updated atomically.  See the
            An AtomicSByte is used in applications such as atomically
            incremented sequence numbers, and cannot be used as a replacement
            for an sbyte.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicSByte.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicSByte"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicSByte.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicSByte"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Forge.Threading.AtomicSByte.LongValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than SByte.MaxValue ot less than SByte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicSByte.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than SByte.MaxValue ot less than SByte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicSByte.ShortValue">
            <summary>
            Gets or sets the short value.
            </summary>
            <value>
            The short value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than SByte.MaxValue ot less than SByte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicSByte.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
            <value>
            The float value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than SByte.MaxValue ot less than SByte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicSByte.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>
            The double value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than SByte.MaxValue ot less than SByte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicSByte.DecimalValue">
            <summary>
            Gets or sets the decimal value.
            </summary>
            <value>
            The decimal value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than SByte.MaxValue ot less than SByte.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicSByte.ByteValue">
            <summary>
            Gets or sets the byte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicSByte.UShortValue">
            <summary>
            Gets or sets the ushort value.
            </summary>
            <value>
            The ushort value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicSByte.UIntValue">
            <summary>
            Gets or sets the uint value.
            </summary>
            <value>
            The uint value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicSByte.ULongValue">
            <summary>
            Gets or sets the ulong value.
            </summary>
            <value>
            The ulong value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicSByte.SByteValue">
            <summary>
            Gets or sets the sbyte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="M:Forge.Threading.AtomicSByte.GetAndSet(System.SByte)">
            <summary>
            Gets the and set.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicSByte.GetAndIncrement">
            <summary>
            Gets the and increment.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicSByte.GetAndDecrement">
            <summary>
            Gets the and decrement.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicSByte.GetAndAdd(System.SByte)">
            <summary>
            Gets the and add.
            </summary>
            <param name="delta">The delta.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicSByte.IncrementAndGet">
            <summary>
            Increments the and get.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicSByte.DecrementAndGet">
            <summary>
            Decrements the and get.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicSByte.AddAndGet(System.SByte)">
            <summary>
            Adds the and get.
            </summary>
            <param name="delta">The delta.</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Forge.Threading.AtomicSByte.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Threading.AtomicShort">
            <summary>
            A short value that may be updated atomically.  See the
            An AtomicShort is used in applications such as atomically
            incremented sequence numbers, and cannot be used as a replacement
            for an short.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicShort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicShort"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicShort.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicShort"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Forge.Threading.AtomicShort.LongValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Int16.MaxValue ot less than Int16.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicShort.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Int16.MaxValue ot less than Int16.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicShort.ShortValue">
            <summary>
            Gets or sets the short value.
            </summary>
            <value>
            The short value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicShort.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
            <value>
            The float value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Int16.MaxValue ot less than Int16.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicShort.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>
            The double value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Int16.MaxValue ot less than Int16.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicShort.DecimalValue">
            <summary>
            Gets or sets the decimal value.
            </summary>
            <value>
            The decimal value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Int16.MaxValue ot less than Int16.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicShort.ByteValue">
            <summary>
            Gets or sets the byte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicShort.UShortValue">
            <summary>
            Gets or sets the ushort value.
            </summary>
            <value>
            The ushort value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicShort.UIntValue">
            <summary>
            Gets or sets the uint value.
            </summary>
            <value>
            The uint value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicShort.ULongValue">
            <summary>
            Gets or sets the ulong value.
            </summary>
            <value>
            The ulong value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicShort.SByteValue">
            <summary>
            Gets or sets the sbyte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="M:Forge.Threading.AtomicShort.GetAndSet(System.Int16)">
            <summary>
            Gets the and set.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicShort.GetAndIncrement">
            <summary>
            Gets the and increment.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicShort.GetAndDecrement">
            <summary>
            Gets the and decrement.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicShort.GetAndAdd(System.Int16)">
            <summary>
            Gets the and add.
            </summary>
            <param name="delta">The delta.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicShort.IncrementAndGet">
            <summary>
            Increments the and get.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicShort.DecrementAndGet">
            <summary>
            Decrements the and get.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicShort.AddAndGet(System.Int16)">
            <summary>
            Adds the and get.
            </summary>
            <param name="delta">The delta.</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Forge.Threading.AtomicShort.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Threading.AtomicUInt">
            <summary>
            An uint value that may be updated atomically.  See the
            An AtomicUInt is used in applications such as atomically
            incremented sequence numbers, and cannot be used as a replacement
            for a uint.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicUInt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicUInt"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicUInt.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicUInt"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Forge.Threading.AtomicUInt.LongValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicUInt.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicUInt.ShortValue">
            <summary>
            Gets or sets the short value.
            </summary>
            <value>
            The short value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicUInt.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
            <value>
            The float value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than UInt32.MaxValue ot less than UInt32.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicUInt.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>
            The double value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUInt.DecimalValue">
            <summary>
            Gets or sets the decimal value.
            </summary>
            <value>
            The decimal value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUInt.ByteValue">
            <summary>
            Gets or sets the byte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUInt.UShortValue">
            <summary>
            Gets or sets the ushort value.
            </summary>
            <value>
            The ushort value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUInt.UIntValue">
            <summary>
            Gets or sets the uint value.
            </summary>
            <value>
            The uint value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUInt.ULongValue">
            <summary>
            Gets or sets the ulong value.
            </summary>
            <value>
            The ulong value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUInt.SByteValue">
            <summary>
            Gets or sets the sbyte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="M:Forge.Threading.AtomicUInt.GetAndSet(System.UInt32)">
            <summary>
            Gets the and set.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUInt.GetAndIncrement">
            <summary>
            Gets the and increment.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUInt.GetAndDecrement">
            <summary>
            Gets the and decrement.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUInt.GetAndAdd(System.UInt32)">
            <summary>
            Gets the and add.
            </summary>
            <param name="delta">The delta.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUInt.IncrementAndGet">
            <summary>
            Increments the and get.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUInt.DecrementAndGet">
            <summary>
            Decrements the and get.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUInt.AddAndGet(System.UInt32)">
            <summary>
            Adds the and get.
            </summary>
            <param name="delta">The delta.</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Forge.Threading.AtomicUInt.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Threading.AtomicULong">
            <summary>
            An ulong value that may be updated atomically.  See the
            An AtomicULong is used in applications such as atomically
            incremented sequence numbers, and cannot be used as a replacement
            for a ulong.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicULong.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicULong"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicULong.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicULong"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Forge.Threading.AtomicULong.LongValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicULong.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicULong.ShortValue">
            <summary>
            Gets or sets the short value.
            </summary>
            <value>
            The short value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicULong.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
            <value>
            The float value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than UInt32.MaxValue ot less than UInt32.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicULong.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>
            The double value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicULong.DecimalValue">
            <summary>
            Gets or sets the decimal value.
            </summary>
            <value>
            The decimal value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicULong.ByteValue">
            <summary>
            Gets or sets the byte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicULong.UShortValue">
            <summary>
            Gets or sets the ushort value.
            </summary>
            <value>
            The ushort value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicULong.UIntValue">
            <summary>
            Gets or sets the uint value.
            </summary>
            <value>
            The uint value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicULong.ULongValue">
            <summary>
            Gets or sets the ulong value.
            </summary>
            <value>
            The ulong value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicULong.SByteValue">
            <summary>
            Gets or sets the sbyte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="M:Forge.Threading.AtomicULong.GetAndSet(System.UInt64)">
            <summary>
            Gets the and set.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicULong.GetAndIncrement">
            <summary>
            Gets the and increment.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicULong.GetAndDecrement">
            <summary>
            Gets the and decrement.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicULong.GetAndAdd(System.UInt64)">
            <summary>
            Gets the and add.
            </summary>
            <param name="delta">The delta.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicULong.IncrementAndGet">
            <summary>
            Increments the and get.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicULong.DecrementAndGet">
            <summary>
            Decrements the and get.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicULong.AddAndGet(System.UInt64)">
            <summary>
            Adds the and get.
            </summary>
            <param name="delta">The delta.</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Forge.Threading.AtomicULong.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Threading.AtomicUShort">
            <summary>
            An ushort value that may be updated atomically.  See the
            An AtomicUShort is used in applications such as atomically
            incremented sequence numbers, and cannot be used as a replacement
            for a ushort.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicUShort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicUShort"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.AtomicUShort.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.AtomicUShort"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Forge.Threading.AtomicUShort.LongValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUShort.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>
            The int value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUShort.ShortValue">
            <summary>
            Gets or sets the short value.
            </summary>
            <value>
            The short value.
            </value>
            <exception cref="T:System.OverflowException">value is greater than Double.MaxValue ot less than Double.MinValue</exception>
        </member>
        <member name="P:Forge.Threading.AtomicUShort.FloatValue">
            <summary>
            Gets or sets the float value.
            </summary>
            <value>
            The float value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUShort.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>
            The double value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUShort.DecimalValue">
            <summary>
            Gets or sets the decimal value.
            </summary>
            <value>
            The decimal value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUShort.ByteValue">
            <summary>
            Gets or sets the byte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUShort.UShortValue">
            <summary>
            Gets or sets the ushort value.
            </summary>
            <value>
            The ushort value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUShort.UIntValue">
            <summary>
            Gets or sets the uint value.
            </summary>
            <value>
            The uint value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUShort.ULongValue">
            <summary>
            Gets or sets the ulong value.
            </summary>
            <value>
            The ulong value.
            </value>
        </member>
        <member name="P:Forge.Threading.AtomicUShort.SByteValue">
            <summary>
            Gets or sets the sbyte value.
            </summary>
            <value>
            The sbyte value.
            </value>
        </member>
        <member name="M:Forge.Threading.AtomicUShort.GetAndSet(System.UInt16)">
            <summary>
            Gets the and set.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUShort.GetAndIncrement">
            <summary>
            Gets the and increment.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUShort.GetAndDecrement">
            <summary>
            Gets the and decrement.
            </summary>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUShort.GetAndAdd(System.UInt16)">
            <summary>
            Gets the and add.
            </summary>
            <param name="delta">The delta.</param>
            <returns>
            The original value
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUShort.IncrementAndGet">
            <summary>
            Increments the and get.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUShort.DecrementAndGet">
            <summary>
            Decrements the and get.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:Forge.Threading.AtomicUShort.AddAndGet(System.UInt16)">
            <summary>
            Adds the and get.
            </summary>
            <param name="delta">The delta.</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Forge.Threading.AtomicUShort.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Forge.Threading.ConfigSection.ThreadPoolConfiguration">
            <summary>
            Configuration access helper class for ThreadPools
            </summary>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPoolConfiguration.#cctor">
            <summary>
            Initializes the <see cref="T:Forge.Threading.ConfigSection.ThreadPoolConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPoolConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.ConfigSection.ThreadPoolConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPoolConfiguration.LoadFactoryDefaults">
            <summary>
            Loads the factory defaults.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPoolConfiguration.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="T:Forge.Threading.ConfigSection.ThreadPoolSection">
            <summary>
            Represents the confoguration section of the threadpools
            </summary>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPoolSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.ConfigSection.ThreadPoolSection"/> class.
            </summary>
        </member>
        <member name="P:Forge.Threading.ConfigSection.ThreadPoolSection.ThreadPools">
            <summary>
            Gets or sets the thread pools.
            </summary>
            <value>
            The thread pools.
            </value>
        </member>
        <member name="T:Forge.Threading.ConfigSection.ThreadPools">
            <summary>
            Represents the configuration section content of the threadpool configuration
            </summary>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPools.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.ConfigSection.ThreadPools"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPools.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPools.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPools.Add(Forge.Threading.ConfigSection.ThreadPoolItem)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPools.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPools.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:Forge.Threading.ConfigSection.ThreadPools.Item(System.Int32)">
            <summary>
            Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The specified property, attribute, or child element
            </returns>
        </member>
        <member name="T:Forge.Threading.ConfigSection.ThreadPoolItem">
            <summary>
            Represents the threadpool configuration item
            </summary>
        </member>
        <member name="M:Forge.Threading.ConfigSection.ThreadPoolItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.ConfigSection.ThreadPoolItem"/> class.
            </summary>
        </member>
        <member name="P:Forge.Threading.ConfigSection.ThreadPoolItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Forge.Threading.ConfigSection.ThreadPoolItem.MinThreadNumber">
            <summary>
            Gets or sets the min thread number.
            </summary>
            <value>
            The min thread number.
            </value>
        </member>
        <member name="P:Forge.Threading.ConfigSection.ThreadPoolItem.MaxThreadNumber">
            <summary>
            Gets or sets the max thread number.
            </summary>
            <value>
            The max thread number.
            </value>
        </member>
        <member name="P:Forge.Threading.ConfigSection.ThreadPoolItem.MaxConcurrentExecution">
            <summary>
            Gets or sets the max concurrent execution.
            </summary>
            <value>
            The max concurrent execution.
            </value>
        </member>
        <member name="P:Forge.Threading.ConfigSection.ThreadPoolItem.ShutDownIdleThreadTime">
            <summary>
            Gets or sets the shut down idle thread time.
            </summary>
            <value>
            The shut down idle thread time.
            </value>
        </member>
        <member name="P:Forge.Threading.ConfigSection.ThreadPoolItem.MaxStackSize">
            <summary>
            Gets or sets the size of the max stack.
            </summary>
            <value>
            The size of the max stack.
            </value>
        </member>
        <member name="P:Forge.Threading.ConfigSection.ThreadPoolItem.SetReadOnlyFlag">
            <summary>
            Gets or sets a value indicating whether [set read only flag].
            </summary>
            <value>
              <c>true</c> if [set read only flag]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Forge.Threading.DeadlockException">
            <summary>
            Exception for deadlock fail scenario
            </summary>
        </member>
        <member name="M:Forge.Threading.DeadlockException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.DeadlockException"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.DeadlockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.DeadlockException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Forge.Threading.DeadlockException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.DeadlockException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Forge.Threading.DeadlockException.#ctor(System.String,System.String,System.Threading.Thread,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.DeadlockException" /> class.
            </summary>
            <param name="currentLockName">Name of the current lock.</param>
            <param name="conflictedLockName">Name of the conflicted lock.</param>
            <param name="conflictedThread">The conflicted thread.</param>
            <param name="conflictedThreadStackTrace">The conflicted thread stack trace.</param>
        </member>
        <member name="M:Forge.Threading.DeadlockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.DeadlockException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="T:Forge.Threading.DeadlockSafeLock">
            <summary>
            Reentrance lock with deadlock detection ability
            </summary>
        </member>
        <member name="M:Forge.Threading.DeadlockSafeLock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.DeadlockSafeLock"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Forge.Threading.DeadlockSafeLock.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Forge.Threading.DeadlockSafeLock"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Forge.Threading.DeadlockSafeLock.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Forge.Threading.DeadlockSafeLock.IsDisposed">
            <summary>
            Gets a value indicating whether this <see cref="T:Forge.Threading.DeadlockSafeLock"/> is disposed.
            </summary>
            <value>
              <c>true</c> if disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Threading.DeadlockSafeLock.LockId">
            <summary>
            Gets the lock id.
            </summary>
            <value>
            The lock id.
            </value>
        </member>
        <member name="P:Forge.Threading.DeadlockSafeLock.IsHeldByCurrentThread">
            <summary>
            Gets a value indicating whether this instance is held by current thread.
            </summary>
            <value>
            	<c>true</c> if this instance is held by current thread; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Threading.DeadlockSafeLock.IsLocked">
            <summary>
            Gets a value indicating whether this instance is locked.
            </summary>
            <value>
              <c>true</c> if this instance is locked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Forge.Threading.DeadlockSafeLock.Lock">
            <summary>
            Locks this instance.
            </summary>
            <exception cref="T:Forge.Threading.DeadlockException">Occurs when deadlock detected.</exception>
            <exception cref="T:System.ObjectDisposedException">Occurs when this instance has disposed.</exception>
        </member>
        <member name="M:Forge.Threading.DeadlockSafeLock.TryLock(System.TimeSpan)">
            <summary>
            Tries the lock.
            </summary>
            <param name="timeout">The timeout.</param>
            <exception cref="T:Forge.Threading.DeadlockException">Occurs when deadlock detected.</exception>
            <exception cref="T:System.ObjectDisposedException">Occurs when this instance has disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Occurs when the TimeSpan parameter is null.</exception>
            <returns>True, if the lock acquired successfuly, otherwise False.</returns>
        </member>
        <member name="M:Forge.Threading.DeadlockSafeLock.TryLock(System.Int32)">
            <summary>
            Tries the lock.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <exception cref="T:Forge.Threading.DeadlockException">Occurs when deadlock detected.</exception>
            <exception cref="T:System.ObjectDisposedException">Occurs when this instance has disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when int value is lower then Timeout.Infinite (-1)</exception>
            <returns>True, if the lock acquired successfuly, otherwise False.</returns>
        </member>
        <member name="M:Forge.Threading.DeadlockSafeLock.Unlock">
            <summary>
            Unlocks this instance.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Occurs when this instance has disposed.</exception>
        </member>
        <member name="M:Forge.Threading.DeadlockSafeLock.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Threading.DeadlockSafeLock.Equals(Forge.Threading.DeadlockSafeLock)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>True, if the other class is equals with this.</returns>
        </member>
        <member name="M:Forge.Threading.DeadlockSafeLock.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Forge.Threading.DeadlockSafeLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Forge.Threading.ILock">
            <summary>
            Common interface for locks
            </summary>
        </member>
        <member name="P:Forge.Threading.ILock.IsLocked">
            <summary>
            Gets a value indicating whether this instance is locked.
            </summary>
            <value>
              <c>true</c> if this instance is locked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Threading.ILock.IsHeldByCurrentThread">
            <summary>
            Gets a value indicating whether this instance is held by current thread.
            </summary>
            <value>
            	<c>true</c> if this instance is held by current thread; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Threading.ILock.IsDisposed">
            <summary>
            Gets a value indicating whether this <see cref="T:Forge.Threading.ILock"/> is disposed.
            </summary>
            <value>
              <c>true</c> if disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Forge.Threading.ILock.Lock">
            <summary>
            Locks this instance.
            </summary>
        </member>
        <member name="M:Forge.Threading.ILock.TryLock(System.TimeSpan)">
            <summary>
            Tries the lock.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>True, if the lock acquired successfuly, otherwise False.</returns>
        </member>
        <member name="M:Forge.Threading.ILock.TryLock(System.Int32)">
            <summary>
            Tries the lock.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns>True, if the lock acquired successfuly, otherwise False.</returns>
        </member>
        <member name="M:Forge.Threading.ILock.Unlock">
            <summary>
            Unlocks this instance.
            </summary>
        </member>
        <member name="T:Forge.Threading.LockHandle">
            <summary>
            Lock handle helper class
            </summary>
        </member>
        <member name="F:Forge.Threading.LockHandle.DEFAULT_WAIT_CYCLE_IN_MS">
            <summary>
            If value lower than 0, the wait value will be randomized
            </summary>
        </member>
        <member name="F:Forge.Threading.LockHandle.DEFAULT_CALL_TIMEOUT_IN_MS">
            <summary>
            Default call timeout
            </summary>
        </member>
        <member name="F:Forge.Threading.LockHandle.DEFAULT_PERIOD_TIMEOUT_IN_MS">
            <summary>
            Default period timeout
            </summary>
        </member>
        <member name="M:Forge.Threading.LockHandle.LockAllAgressive(System.Collections.Generic.ICollection{Forge.Threading.ILock})">
            <summary>
            Locks provided lock agressively. This means the method locks all available lock and keep them locked.
            Next round tries to lock the others. The cycle will be retry until timeout or all lock acquired successfully.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Forge.Threading.LockHandle.LockAllAgressive(System.Collections.Generic.ICollection{Forge.Threading.ILock},System.Int32,System.Int32)">
            <summary>
            Locks provided locks agressively. This means the method locks all available lock and keep them locked.
            Next round tries to lock the others. The cycle will be retry until timeout or all lock acquired successfully.
            </summary>
            <param name="locks">The locks.</param>
            <param name="callTimeout">The call timeout.</param>
            <param name="periodTimeout">The period timeout.</param>
        </member>
        <member name="M:Forge.Threading.LockHandle.LockAllGentle(System.Collections.Generic.ICollection{Forge.Threading.ILock})">
            <summary>
            Locks provided locks like a gentleman. This means the method lock all available lock and if remains
            unavailable locks in the current lock cycle, release all locked locks and try again all.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Forge.Threading.LockHandle.LockAllGentle(System.Collections.Generic.ICollection{Forge.Threading.ILock},System.Int32)">
            <summary>
            Locks provided locks like a gentleman. This means the method lock all available lock and if remains
            unavailable locks in the current lock cycle, release all locked locks and try again all.
            </summary>
            <param name="locks">The locks.</param>
            <param name="waitCycleInMs">The wait cycle in ms.</param>
        </member>
        <member name="M:Forge.Threading.LockHandle.TryLockAll(System.Collections.Generic.ICollection{Forge.Threading.ILock})">
            <summary>
            Tries the lock all.
            </summary>
            <param name="locks">The locks.</param>
            <returns>
            True, if all lock successfully acquired, otherwise False.
            </returns>
        </member>
        <member name="M:Forge.Threading.LockHandle.TryLockAll(System.Collections.Generic.ICollection{Forge.Threading.ILock},System.Int32)">
            <summary>
            Tries the lock all.
            </summary>
            <param name="locks">The locks.</param>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns>
            True, if all lock successfully acquired, otherwise False.
            </returns>
        </member>
        <member name="T:Forge.Threading.SynchronizedValue`1">
            <summary>
            Provide syncronized access to a value
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Forge.Threading.SynchronizedValue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.SynchronizedValue`1"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.SynchronizedValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.SynchronizedValue`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Forge.Threading.SynchronizedValue`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Forge.Threading.SynchronizedValue`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Forge.Threading.SynchronizedValue`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Forge.Threading.SynchronizedValue`1.ValueLock">
            <summary>
            Gets the value lock.
            </summary>
            <value>
            The value lock.
            </value>
        </member>
        <member name="M:Forge.Threading.SynchronizedValue`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Forge.Threading.SynchronizedValue`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Forge.Threading.SynchronizedValue`1.DoDisposeCheck">
            <summary>
            Does the dispose check.
            </summary>
        </member>
        <member name="M:Forge.Threading.SynchronizedValue`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Forge.Threading.Tasking.ChaosTheoryEnum">
            <summary>
            Represents the order mode of the Task Manager
            </summary>
        </member>
        <member name="F:Forge.Threading.Tasking.ChaosTheoryEnum.Chaos">
            <summary>
            Preemtive
            </summary>
        </member>
        <member name="F:Forge.Threading.Tasking.ChaosTheoryEnum.OrderByTaskDelegateTarget">
            <summary>
            Tasks ordered by task delegate target
            </summary>
        </member>
        <member name="F:Forge.Threading.Tasking.ChaosTheoryEnum.OrderByReturnDelegateTarget">
            <summary>
            Tasks ordered by return delegate target
            </summary>
        </member>
        <member name="F:Forge.Threading.Tasking.ChaosTheoryEnum.Sequential">
            <summary>
            Task ordered by incoming sequence
            </summary>
        </member>
        <member name="T:Forge.Threading.Tasking.ReturnCallback">
            <summary>
            Callback for end methods
            </summary>
            <param name="taskResult">Nongeneric TaskResult</param>
        </member>
        <member name="T:Forge.Threading.Tasking.ReturnCallback`1">
            <summary>
            Callback for end methods
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskResult">Generic TaskResult</param>
        </member>
        <member name="T:Forge.Threading.Tasking.TaskManager">
            <summary>
            Executes a task and than call back with the result
            </summary>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.Tasking.TaskManager"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.#ctor(Forge.Threading.Tasking.ChaosTheoryEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.Tasking.TaskManager"/> class.
            </summary>
        </member>
        <member name="P:Forge.Threading.Tasking.TaskManager.ChaosTheoryMode">
            <summary>
            Gets the chaos theory mode.
            </summary>
            <value>
            The chaos theory mode.
            </value>
        </member>
        <member name="P:Forge.Threading.Tasking.TaskManager.InvokeUIAtAction">
            <summary>
            Gets or sets a value indicating whether [invoke UI at action].
            </summary>
            <value>
              <c>true</c> if [invoke UI at action]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Threading.Tasking.TaskManager.InvokeUIAtReturn">
            <summary>
            Gets or sets a value indicating whether [invoke UI at return].
            </summary>
            <value>
              <c>true</c> if [invoke UI at return]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute(Forge.Action,Forge.Threading.Tasking.ReturnCallback)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``1(Forge.Action{``0},Forge.Threading.Tasking.ReturnCallback,``0)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``2(Forge.Action{``0,``1},Forge.Threading.Tasking.ReturnCallback,``0,``1)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``3(Forge.Action{``0,``1,``2},Forge.Threading.Tasking.ReturnCallback,``0,``1,``2)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``4(Forge.Action{``0,``1,``2,``3},Forge.Threading.Tasking.ReturnCallback,``0,``1,``2,``3)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``5(Forge.Action{``0,``1,``2,``3,``4},Forge.Threading.Tasking.ReturnCallback,``0,``1,``2,``3,``4)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``6(Forge.Action{``0,``1,``2,``3,``4,``5},Forge.Threading.Tasking.ReturnCallback,``0,``1,``2,``3,``4,``5)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``7(Forge.Action{``0,``1,``2,``3,``4,``5,``6},Forge.Threading.Tasking.ReturnCallback,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``8(Forge.Action{``0,``1,``2,``3,``4,``5,``6,``7},Forge.Threading.Tasking.ReturnCallback,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="T8">The type of the 8.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
            <param name="p8">The p8.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``1(Forge.Func{``0},Forge.Threading.Tasking.ReturnCallback{``0})">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``2(Forge.Func{``0,``1},Forge.Threading.Tasking.ReturnCallback{``1},``0)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``3(Forge.Func{``0,``1,``2},Forge.Threading.Tasking.ReturnCallback{``2},``0,``1)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``4(Forge.Func{``0,``1,``2,``3},Forge.Threading.Tasking.ReturnCallback{``3},``0,``1,``2)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``5(Forge.Func{``0,``1,``2,``3,``4},Forge.Threading.Tasking.ReturnCallback{``4},``0,``1,``2,``3)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``6(Forge.Func{``0,``1,``2,``3,``4,``5},Forge.Threading.Tasking.ReturnCallback{``5},``0,``1,``2,``3,``4)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``7(Forge.Func{``0,``1,``2,``3,``4,``5,``6},Forge.Threading.Tasking.ReturnCallback{``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``8(Forge.Func{``0,``1,``2,``3,``4,``5,``6,``7},Forge.Threading.Tasking.ReturnCallback{``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskManager.Execute``9(Forge.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},Forge.Threading.Tasking.ReturnCallback{``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Executes the specified task delegate.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="T8">The type of the 8.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskDelegate">The task delegate.</param>
            <param name="returnDelegate">The return delegate.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="p5">The p5.</param>
            <param name="p6">The p6.</param>
            <param name="p7">The p7.</param>
            <param name="p8">The p8.</param>
        </member>
        <member name="P:Forge.Threading.Tasking.TaskManager.QueueItem.TaskDelegate">
            <summary>
            Gets or sets the task delegate.
            </summary>
            <value>
            The task delegate.
            </value>
        </member>
        <member name="P:Forge.Threading.Tasking.TaskManager.QueueItem.ReturnDelegate">
            <summary>
            Gets or sets the return delegate.
            </summary>
            <value>
            The return delegate.
            </value>
        </member>
        <member name="P:Forge.Threading.Tasking.TaskManager.QueueItem.InParameters">
            <summary>
            Gets or sets the in parameters.
            </summary>
            <value>
            The in parameters.
            </value>
        </member>
        <member name="T:Forge.Threading.Tasking.TaskResult">
            <summary>
            Task result without result
            </summary>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskResult.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.Tasking.TaskResult"/> class.
            </summary>
            <param name="inParameters">The in parameters.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskResult.#ctor(System.Object[],System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.Tasking.TaskResult"/> class.
            </summary>
            <param name="inParameters">The in parameters.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Forge.Threading.Tasking.TaskResult.InParameters">
            <summary>
            Gets the in parameters.
            </summary>
            <value>
            The in parameters.
            </value>
        </member>
        <member name="P:Forge.Threading.Tasking.TaskResult.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="T:Forge.Threading.Tasking.TaskResult`1">
            <summary>
            Task result with generic result property
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskResult`1.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.Tasking.TaskResult`1"/> class.
            </summary>
            <param name="inParameters">The in parameters.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskResult`1.#ctor(System.Object[],System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.Tasking.TaskResult`1"/> class.
            </summary>
            <param name="inParameters">The in parameters.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskResult`1.#ctor(System.Object[],System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.Tasking.TaskResult`1"/> class.
            </summary>
            <param name="inParameters">The in parameters.</param>
            <param name="exception">The exception.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Forge.Threading.Tasking.TaskResult`1.#ctor(System.Object[],`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.Tasking.TaskResult`1"/> class.
            </summary>
            <param name="inParameters">The in parameters.</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:Forge.Threading.Tasking.TaskResult`1.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Forge.Threading.ThreadPool">
            <summary>
            ThreadPool implementation for specific use cases
            </summary>
        </member>
        <member name="M:Forge.Threading.ThreadPool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.ThreadPool"/> class.
            </summary>
        </member>
        <member name="M:Forge.Threading.ThreadPool.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.ThreadPool"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Forge.Threading.ThreadPool.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.ThreadPool"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="minThreadNumber">The min thread number.</param>
            <param name="maxThreadNumber">The max thread number.</param>
            <param name="maxStackSize">Size of the max stack.</param>
        </member>
        <member name="M:Forge.Threading.ThreadPool.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.ThreadPool"/> class.
            </summary>
            <param name="minThreadNumber">The min thread number.</param>
            <param name="maxThreadNumber">The max thread number.</param>
            <param name="maxStackSize">Size of the max stack.</param>
        </member>
        <member name="M:Forge.Threading.ThreadPool.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Forge.Threading.ThreadPool"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Forge.Threading.ThreadPool.MinThreadNumber">
            <summary>
            Gets or sets the min thread number.
            </summary>
            <value>
            The min thread number.
            </value>
        </member>
        <member name="P:Forge.Threading.ThreadPool.MaxThreadNumber">
            <summary>
            Gets or sets the max thread number.
            </summary>
            <value>
            The max thread number.
            </value>
        </member>
        <member name="P:Forge.Threading.ThreadPool.ShutDownIdleThreadTime">
            <summary>
            Gets or sets the shut down idle thread time.
            </summary>
            <value>
            The shut down idle thread time.
            </value>
        </member>
        <member name="P:Forge.Threading.ThreadPool.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Forge.Threading.ThreadPool.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Threading.ThreadPool.MaxStackSize">
            <summary>
            Gets or sets the size of the max stack.
            </summary>
            <value>
            The size of the max stack.
            </value>
        </member>
        <member name="M:Forge.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queues the user work item.
            </summary>
            <param name="callBack">The call back.</param>
        </member>
        <member name="M:Forge.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queues the user work item.
            </summary>
            <param name="callBack">The call back.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Forge.Threading.ThreadPool.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Forge.Threading.ThreadPool.TaskContainer.WaitCallback">
            <summary>
            Gets or sets the wait callback.
            </summary>
            <value>
            The wait callback.
            </value>
        </member>
        <member name="P:Forge.Threading.ThreadPool.TaskContainer.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:Forge.Threading.ThreadPool.TaskContainer.WorkerThread">
            <summary>
            Gets or sets the worker thread.
            </summary>
            <value>
            The worker thread.
            </value>
        </member>
        <member name="M:Forge.Threading.ThreadPool.WorkerThread.#ctor(System.Threading.Thread)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Threading.ThreadPool.WorkerThread"/> class.
            </summary>
            <param name="thread">The thread.</param>
        </member>
        <member name="P:Forge.Threading.ThreadPool.WorkerThread.Thread">
            <summary>
            Gets or sets the thread.
            </summary>
            <value>
            The thread.
            </value>
        </member>
        <member name="P:Forge.Threading.ThreadPool.WorkerThread.IsShutdownForce">
            <summary>
            Gets or sets a value indicating whether this instance is shutdown force.
            </summary>
            <value>
            	<c>true</c> if this instance is shutdown force; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Forge.Threading.ThreadPool.WorkerThread.WakeUpEvent">
            <summary>
            Gets or sets the wake up event.
            </summary>
            <value>
            The wake up event.
            </value>
        </member>
        <member name="P:Forge.Threading.ThreadPool.WorkerThread.ShutdownEvent">
            <summary>
            Gets or sets the shutdown event.
            </summary>
            <value>
            The shutdown event.
            </value>
        </member>
        <member name="P:Forge.Threading.ThreadPool.WorkerThread.Task">
            <summary>
            Gets or sets the task.
            </summary>
            <value>
            The task.
            </value>
        </member>
        <member name="M:Forge.Threading.ThreadPool.WorkerThread.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Forge.Threading.ThreadPool.WorkerThread.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Forge.Threading.ThreadPool.WorkerThread.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Forge.ThrowHelper">
            <summary>
            Helper class to throw common exceptions
            </summary>
        </member>
        <member name="M:Forge.ThrowHelper.IfNullAndNullsAreIllegalThenThrow``1(System.Object,System.String)">
            <summary>
            If the null and nulls are illegal then throw.
            </summary>
            <typeparam name="T">Type to exam</typeparam>
            <param name="value">The value.</param>
            <param name="argName">Name of the arg.</param>
        </member>
        <member name="M:Forge.ThrowHelper.ThrowArgumentException(System.String)">
            <summary>
            Throws the argument exception.
            </summary>
            <param name="argName">Name of the arg.</param>
        </member>
        <member name="M:Forge.ThrowHelper.ThrowArgumentException(System.String,System.String)">
            <summary>
            Throws the argument exception.
            </summary>
            <param name="message">The message.</param>
            <param name="argName">Name of the arg.</param>
        </member>
        <member name="M:Forge.ThrowHelper.ThrowArgumentNullException(System.String)">
            <summary>
            Throws the argument null exception.
            </summary>
            <param name="argName">Name of the arg.</param>
        </member>
        <member name="M:Forge.ThrowHelper.ThrowArgumentOutOfRangeException(System.String)">
            <summary>
            Throws the argument out of range exception.
            </summary>
            <param name="argName">Name of the arg.</param>
        </member>
        <member name="M:Forge.ThrowHelper.ThrowWrongValueTypeArgumentException(System.Object,System.Type)">
            <summary>
            Throws the wrong value type argument exception.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
        </member>
    </members>
</doc>
